CCS PCM C Compiler, Version 5.015, 5967               27-nov.-23 09:14

               Filename:   C:\Users\strop\OneDrive\Documentos\GitHub\Microcontroladores\Microcontroladores\Examen_U4\Examen_U4.lst

               ROM used:   603 words (7%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           33 (9%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1A1
0003:  NOP
.................... // Transmisor  
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,20
000D:  DATA 31,10
000E:  DATA A0,20
000F:  DATA 32,10
0010:  DATA A0,20
0011:  DATA 33,05
0012:  DATA 25,26
0013:  DATA 75,16
0014:  DATA A0,12
0015:  DATA CC,3A
0016:  DATA 2C,10
0017:  DATA 25,26
0018:  DATA 75,00
*
00E5:  MOVF   0B,W
00E6:  MOVWF  2B
00E7:  BCF    0B.7
00E8:  BSF    03.5
00E9:  BSF    03.6
00EA:  BSF    0C.7
00EB:  BSF    0C.0
00EC:  NOP
00ED:  NOP
00EE:  BCF    03.5
00EF:  BCF    03.6
00F0:  BTFSC  2B.7
00F1:  BSF    0B.7
00F2:  BTFSC  03.0
00F3:  GOTO   11C
00F4:  BSF    03.6
00F5:  MOVF   0C,W
00F6:  ANDLW  7F
00F7:  BCF    03.6
00F8:  MOVWF  2B
00F9:  BSF    03.6
00FA:  MOVF   0D,W
00FB:  BCF    03.6
00FC:  MOVWF  2C
00FD:  BSF    03.6
00FE:  MOVF   0F,W
00FF:  BCF    03.6
0100:  MOVWF  2D
0101:  MOVF   2B,W
0102:  MOVWF  33
0103:  CALL   0B1
0104:  MOVF   2C,W
0105:  BSF    03.6
0106:  MOVWF  0D
0107:  BCF    03.6
0108:  MOVF   2D,W
0109:  BSF    03.6
010A:  MOVWF  0F
010B:  BCF    03.6
010C:  MOVF   0B,W
010D:  MOVWF  2E
010E:  BCF    0B.7
010F:  BSF    03.5
0110:  BSF    03.6
0111:  BSF    0C.7
0112:  BSF    0C.0
0113:  NOP
0114:  NOP
0115:  BCF    03.5
0116:  BCF    03.6
0117:  BTFSC  2E.7
0118:  BSF    0B.7
0119:  DECFSZ 2A,F
011A:  GOTO   11C
011B:  GOTO   13B
011C:  BSF    03.6
011D:  RLF    0C,W
011E:  RLF    0E,W
011F:  ANDLW  7F
0120:  BCF    03.6
0121:  MOVWF  2B
0122:  BSF    03.6
0123:  MOVF   0D,W
0124:  BCF    03.6
0125:  MOVWF  2C
0126:  BSF    03.6
0127:  MOVF   0F,W
0128:  BCF    03.6
0129:  MOVWF  2D
012A:  MOVF   2B,W
012B:  MOVWF  33
012C:  CALL   0B1
012D:  MOVF   2C,W
012E:  BSF    03.6
012F:  MOVWF  0D
0130:  BCF    03.6
0131:  MOVF   2D,W
0132:  BSF    03.6
0133:  MOVWF  0F
0134:  INCF   0D,F
0135:  BTFSC  03.2
0136:  INCF   0F,F
0137:  BCF    03.0
0138:  BCF    03.6
0139:  DECFSZ 2A,F
013A:  GOTO   0E5
013B:  BCF    0A.3
013C:  BCF    0A.4
013D:  GOTO   228 (RETURN)
013E:  CLRF   32
013F:  MOVF   04,W
0140:  MOVWF  31
0141:  BCF    32.0
0142:  BTFSC  03.7
0143:  BSF    32.0
0144:  SWAPF  2B,W
0145:  IORLW  F0
0146:  MOVWF  2D
0147:  ADDWF  2D,F
0148:  ADDLW  E2
0149:  MOVWF  2E
014A:  ADDLW  32
014B:  MOVWF  30
014C:  MOVF   2B,W
014D:  ANDLW  0F
014E:  ADDWF  2E,F
014F:  ADDWF  2E,F
0150:  ADDWF  30,F
0151:  ADDLW  E9
0152:  MOVWF  2F
0153:  ADDWF  2F,F
0154:  ADDWF  2F,F
0155:  SWAPF  2A,W
0156:  ANDLW  0F
0157:  ADDWF  2F,F
0158:  ADDWF  30,F
0159:  RLF    2F,F
015A:  RLF    30,F
015B:  COMF   30,F
015C:  RLF    30,F
015D:  MOVF   2A,W
015E:  ANDLW  0F
015F:  ADDWF  30,F
0160:  RLF    2D,F
0161:  MOVLW  07
0162:  MOVWF  2C
0163:  MOVLW  0A
0164:  ADDWF  30,F
0165:  DECF   2F,F
0166:  BTFSS  03.0
0167:  GOTO   164
0168:  ADDWF  2F,F
0169:  DECF   2E,F
016A:  BTFSS  03.0
016B:  GOTO   168
016C:  ADDWF  2E,F
016D:  DECF   2D,F
016E:  BTFSS  03.0
016F:  GOTO   16C
0170:  ADDWF  2D,F
0171:  DECF   2C,F
0172:  BTFSS  03.0
0173:  GOTO   170
0174:  MOVLW  2C
0175:  MOVWF  04
0176:  BCF    03.7
0177:  MOVLW  07
0178:  ANDWF  31,W
0179:  BCF    31.6
017A:  ADDWF  04,F
017B:  MOVLW  30
017C:  SUBWF  04,W
017D:  BTFSC  03.2
017E:  BSF    31.6
017F:  MOVF   00,W
0180:  MOVWF  77
0181:  BTFSS  03.2
0182:  GOTO   18B
0183:  BTFSC  31.6
0184:  GOTO   18B
0185:  BTFSC  31.4
0186:  GOTO   19D
0187:  BTFSC  31.3
0188:  GOTO   18B
0189:  MOVLW  20
018A:  GOTO   18E
018B:  BSF    31.3
018C:  BCF    31.4
018D:  MOVLW  30
018E:  ADDWF  77,F
018F:  CLRF   2B
0190:  MOVF   04,W
0191:  MOVWF  2A
0192:  BCF    2B.0
0193:  BTFSC  03.7
0194:  BSF    2B.0
0195:  MOVF   77,W
0196:  MOVWF  33
0197:  CALL   0B1
0198:  MOVF   2A,W
0199:  MOVWF  04
019A:  BCF    03.7
019B:  BTFSC  2B.0
019C:  BSF    03.7
019D:  INCF   04,F
019E:  BTFSS  31.6
019F:  GOTO   17B
01A0:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20Mhz) 
*
0019:  MOVLW  34
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  06
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  7B
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP 
.................... //Directiva para utilizar puerto USART 
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7) 
.................... #include <lcd_d.c> //Incluir librería LCD 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... #define LCD_DATA_PORT      0x08     //portd    LA PUSE YO  
....................  
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0045:  MOVLW  0F
0046:  BSF    03.5
0047:  ANDWF  08,W
0048:  IORLW  F0
0049:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004A:  BCF    03.5
004B:  BSF    08.2
....................    delay_cycles(1); 
004C:  NOP
....................    lcd_output_enable(1); 
004D:  BSF    08.0
....................    delay_cycles(1); 
004E:  NOP
....................    high = lcd_read_nibble(); 
004F:  CALL   03E
0050:  MOVF   78,W
0051:  MOVWF  3B
....................        
....................    lcd_output_enable(0); 
0052:  BCF    08.0
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BSF    08.0
....................    delay_us(1); 
0055:  GOTO   056
0056:  GOTO   057
0057:  NOP
....................    low = lcd_read_nibble(); 
0058:  CALL   03E
0059:  MOVF   78,W
005A:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
005B:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005C:  MOVLW  0F
005D:  BSF    03.5
005E:  ANDWF  08,W
005F:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0060:  BCF    03.5
0061:  SWAPF  3B,W
0062:  MOVWF  77
0063:  MOVLW  F0
0064:  ANDWF  77,F
0065:  MOVF   77,W
0066:  IORWF  3A,W
0067:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003E:  MOVF   08,W
003F:  MOVWF  77
0040:  SWAPF  08,W
0041:  ANDLW  0F
0042:  MOVWF  78
....................   #endif 
0043:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002D:  SWAPF  3B,W
002E:  ANDLW  F0
002F:  MOVWF  77
0030:  MOVLW  0F
0031:  ANDWF  08,W
0032:  IORWF  77,W
0033:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0034:  NOP
....................    lcd_output_enable(1); 
0035:  BSF    08.0
....................    delay_us(2); 
0036:  MOVLW  02
0037:  MOVWF  77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  GOTO   03B
003B:  NOP
....................    lcd_output_enable(0); 
003C:  BCF    08.0
003D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
0044:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0068:  MOVF   78,W
0069:  MOVWF  3A
006A:  BTFSC  3A.7
006B:  GOTO   045
....................    lcd_output_rs(address); 
006C:  BTFSS  38.0
006D:  BCF    08.1
006E:  BTFSC  38.0
006F:  BSF    08.1
....................    delay_cycles(1); 
0070:  NOP
....................    lcd_output_rw(0); 
0071:  BCF    08.2
....................    delay_cycles(1); 
0072:  NOP
....................    lcd_output_enable(0); 
0073:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0074:  SWAPF  39,W
0075:  MOVWF  3A
0076:  MOVLW  0F
0077:  ANDWF  3A,F
0078:  MOVF   3A,W
0079:  MOVWF  3B
007A:  CALL   02D
....................    lcd_send_nibble(n & 0xf); 
007B:  MOVF   39,W
007C:  ANDLW  0F
007D:  MOVWF  3A
007E:  MOVWF  3B
007F:  CALL   02D
0080:  RETURN
.................... } 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0081:  MOVLW  0F
0082:  BSF    03.5
0083:  ANDWF  08,W
0084:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0085:  BCF    08.0
....................    lcd_rs_tris(); 
0086:  BCF    08.1
....................    lcd_rw_tris(); 
0087:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0088:  BCF    03.5
0089:  BCF    08.1
....................    lcd_output_rw(0); 
008A:  BCF    08.2
....................    lcd_output_enable(0); 
008B:  BCF    08.0
....................      
....................    delay_ms(15); 
008C:  MOVLW  0F
008D:  MOVWF  34
008E:  CALL   019
....................    for(i=1;i<=3;++i) 
008F:  MOVLW  01
0090:  MOVWF  2A
0091:  MOVF   2A,W
0092:  SUBLW  03
0093:  BTFSS  03.0
0094:  GOTO   09D
....................    { 
....................        lcd_send_nibble(3); 
0095:  MOVLW  03
0096:  MOVWF  3B
0097:  CALL   02D
....................        delay_ms(5); 
0098:  MOVLW  05
0099:  MOVWF  34
009A:  CALL   019
009B:  INCF   2A,F
009C:  GOTO   091
....................    } 
....................      
....................    lcd_send_nibble(2); 
009D:  MOVLW  02
009E:  MOVWF  3B
009F:  CALL   02D
....................    for(i=0;i<=3;++i) 
00A0:  CLRF   2A
00A1:  MOVF   2A,W
00A2:  SUBLW  03
00A3:  BTFSS  03.0
00A4:  GOTO   0AE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A5:  MOVF   2A,W
00A6:  CALL   004
00A7:  MOVWF  2B
00A8:  CLRF   38
00A9:  MOVF   2B,W
00AA:  MOVWF  39
00AB:  CALL   044
00AC:  INCF   2A,F
00AD:  GOTO   0A1
00AE:  BCF    0A.3
00AF:  BCF    0A.4
00B0:  GOTO   1B6 (RETURN)
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00C8:  DECFSZ 35,W
00C9:  GOTO   0CB
00CA:  GOTO   0CE
....................       address=LCD_LINE_TWO; 
00CB:  MOVLW  40
00CC:  MOVWF  36
00CD:  GOTO   0CF
....................    else 
....................       address=0; 
00CE:  CLRF   36
....................       
....................    address+=x-1; 
00CF:  MOVLW  01
00D0:  SUBWF  34,W
00D1:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address); 
00D2:  MOVF   36,W
00D3:  IORLW  80
00D4:  MOVWF  37
00D5:  CLRF   38
00D6:  MOVF   37,W
00D7:  MOVWF  39
00D8:  CALL   044
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
00B1:  MOVF   33,W
00B2:  XORLW  0C
00B3:  BTFSC  03.2
00B4:  GOTO   0BC
00B5:  XORLW  06
00B6:  BTFSC  03.2
00B7:  GOTO   0C4
00B8:  XORLW  02
00B9:  BTFSC  03.2
00BA:  GOTO   0DA
00BB:  GOTO   0DF
....................    { 
....................       case '\f'   :  lcd_send_byte(0,1); 
00BC:  CLRF   38
00BD:  MOVLW  01
00BE:  MOVWF  39
00BF:  CALL   044
....................                      delay_ms(2); 
00C0:  MOVLW  02
00C1:  MOVWF  34
00C2:  CALL   019
....................                      break; 
00C3:  GOTO   0E4
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00C4:  MOVLW  01
00C5:  MOVWF  34
00C6:  MOVLW  02
00C7:  MOVWF  35
*
00D9:  GOTO   0E4
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00DA:  CLRF   38
00DB:  MOVLW  10
00DC:  MOVWF  39
00DD:  CALL   044
00DE:  GOTO   0E4
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00DF:  MOVLW  01
00E0:  MOVWF  38
00E1:  MOVF   33,W
00E2:  MOVWF  39
00E3:  CALL   044
....................    } 
00E4:  RETURN
.................... } 
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
....................  
.................... void main() 
*
01A1:  MOVF   03,W
01A2:  ANDLW  1F
01A3:  MOVWF  03
01A4:  MOVLW  81
01A5:  BSF    03.5
01A6:  MOVWF  19
01A7:  MOVLW  A6
01A8:  MOVWF  18
01A9:  MOVLW  90
01AA:  BCF    03.5
01AB:  MOVWF  18
01AC:  BSF    03.5
01AD:  BSF    1F.0
01AE:  BSF    1F.1
01AF:  BSF    1F.2
01B0:  BCF    1F.3
01B1:  MOVLW  07
01B2:  MOVWF  1C
01B3:  BCF    03.7
.................... { 
....................    lcd_init(); //Inicializar pantalla 
01B4:  BCF    03.5
01B5:  GOTO   081
....................    //kbd_init(); //Inicializar teclado 
....................    setup_uart(9600); //Configurar baudios 
01B6:  MOVLW  81
01B7:  BSF    03.5
01B8:  MOVWF  19
01B9:  MOVLW  A6
01BA:  MOVWF  18
01BB:  MOVLW  90
01BC:  BCF    03.5
01BD:  MOVWF  18
....................    setup_adc(ADC_CLOCK_INTERNAL); 
01BE:  BSF    03.5
01BF:  BCF    1F.6
01C0:  BCF    03.5
01C1:  BSF    1F.6
01C2:  BSF    1F.7
01C3:  BSF    03.5
01C4:  BSF    1F.7
01C5:  BCF    03.5
01C6:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN3); 
01C7:  BSF    03.5
01C8:  BCF    1F.0
01C9:  BCF    1F.1
01CA:  BSF    1F.2
01CB:  BCF    1F.3
....................    int16 POT1, POT2, POT3; 
....................    int8 byte1, byte2, byte3; 
....................     
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(0); 
01CC:  MOVLW  00
01CD:  MOVWF  78
01CE:  BCF    03.5
01CF:  MOVF   1F,W
01D0:  ANDLW  C7
01D1:  IORWF  78,W
01D2:  MOVWF  1F
....................       POT1 = read_adc(); 
01D3:  BSF    1F.2
01D4:  BTFSC  1F.2
01D5:  GOTO   1D4
01D6:  BSF    03.5
01D7:  MOVF   1E,W
01D8:  BCF    03.5
01D9:  MOVWF  21
01DA:  MOVF   1E,W
01DB:  MOVWF  22
....................       byte1 = POT1 & 255; 
01DC:  MOVF   21,W
01DD:  MOVWF  27
....................       byte2 = (POT1 >> 8) & 255; 
01DE:  CLRF   2B
01DF:  MOVF   22,W
01E0:  MOVWF  28
....................       byte3 = 1; 
01E1:  MOVLW  01
01E2:  MOVWF  29
....................       delay_us(40); 
01E3:  MOVLW  42
01E4:  MOVWF  77
01E5:  DECFSZ 77,F
01E6:  GOTO   1E5
01E7:  NOP
....................       set_adc_channel(1); 
01E8:  MOVLW  08
01E9:  MOVWF  78
01EA:  MOVF   1F,W
01EB:  ANDLW  C7
01EC:  IORWF  78,W
01ED:  MOVWF  1F
....................       POT2 = read_adc(); 
01EE:  BSF    1F.2
01EF:  BTFSC  1F.2
01F0:  GOTO   1EF
01F1:  BSF    03.5
01F2:  MOVF   1E,W
01F3:  BCF    03.5
01F4:  MOVWF  23
01F5:  MOVF   1E,W
01F6:  MOVWF  24
....................       byte1 = POT2 & 255; 
01F7:  MOVF   23,W
01F8:  MOVWF  27
....................       byte2 = (POT2 >> 8) & 255; 
01F9:  CLRF   2B
01FA:  MOVF   24,W
01FB:  MOVWF  28
....................       byte3 = 1; 
01FC:  MOVLW  01
01FD:  MOVWF  29
....................       delay_us(40); 
01FE:  MOVLW  42
01FF:  MOVWF  77
0200:  DECFSZ 77,F
0201:  GOTO   200
0202:  NOP
....................       set_adc_channel(3); 
0203:  MOVLW  18
0204:  MOVWF  78
0205:  MOVF   1F,W
0206:  ANDLW  C7
0207:  IORWF  78,W
0208:  MOVWF  1F
....................       POT3 = read_adc(); 
0209:  BSF    1F.2
020A:  BTFSC  1F.2
020B:  GOTO   20A
020C:  BSF    03.5
020D:  MOVF   1E,W
020E:  BCF    03.5
020F:  MOVWF  25
0210:  MOVF   1E,W
0211:  MOVWF  26
....................       byte1 = POT3 & 255; 
0212:  MOVF   25,W
0213:  MOVWF  27
....................       byte2 = (POT3 >> 8) & 255; 
0214:  CLRF   2B
0215:  MOVF   26,W
0216:  MOVWF  28
....................       byte3 = 1; 
0217:  MOVLW  01
0218:  MOVWF  29
....................       delay_us(40); 
0219:  MOVLW  42
021A:  MOVWF  77
021B:  DECFSZ 77,F
021C:  GOTO   21B
021D:  NOP
....................       printf(lcd_putc,"\fA1  A2  A3\n%Lu, %Lu, %Lu",POT1,POT2,POT3); 
021E:  MOVLW  0C
021F:  BSF    03.6
0220:  MOVWF  0D
0221:  MOVLW  00
0222:  MOVWF  0F
0223:  BCF    03.0
0224:  MOVLW  0C
0225:  BCF    03.6
0226:  MOVWF  2A
0227:  GOTO   0E5
0228:  MOVLW  10
0229:  MOVWF  04
022A:  MOVF   22,W
022B:  MOVWF  2B
022C:  MOVF   21,W
022D:  MOVWF  2A
022E:  CALL   13E
022F:  MOVLW  2C
0230:  MOVWF  33
0231:  CALL   0B1
0232:  MOVLW  20
0233:  MOVWF  33
0234:  CALL   0B1
0235:  MOVLW  10
0236:  MOVWF  04
0237:  MOVF   24,W
0238:  MOVWF  2B
0239:  MOVF   23,W
023A:  MOVWF  2A
023B:  CALL   13E
023C:  MOVLW  2C
023D:  MOVWF  33
023E:  CALL   0B1
023F:  MOVLW  20
0240:  MOVWF  33
0241:  CALL   0B1
0242:  MOVLW  10
0243:  MOVWF  04
0244:  MOVF   26,W
0245:  MOVWF  2B
0246:  MOVF   25,W
0247:  MOVWF  2A
0248:  CALL   13E
....................       putc(byte3); 
0249:  MOVF   29,W
024A:  BTFSS  0C.4
024B:  GOTO   24A
024C:  MOVWF  19
....................       putc(byte2);  
024D:  MOVF   28,W
024E:  BTFSS  0C.4
024F:  GOTO   24E
0250:  MOVWF  19
....................       putc(byte1);  
0251:  MOVF   27,W
0252:  BTFSS  0C.4
0253:  GOTO   252
0254:  MOVWF  19
....................       delay_ms(100); 
0255:  MOVLW  64
0256:  MOVWF  34
0257:  CALL   019
0258:  BSF    03.5
0259:  GOTO   1CC
....................    } 
.................... } 
025A:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
