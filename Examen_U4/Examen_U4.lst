CCS PCM C Compiler, Version 5.112, 29001               22-may.-23 22:42

               Filename:   C:\Users\strop\OneDrive\Documentos\GitHub\Microcontroladores\Examen_U4\Examen_U4.lst

               ROM used:   542 words (7%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           28 (8%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   19A
0003:  NOP
.................... // Transmisor 
.................... #include <16F877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,20
000D:  DATA C4,21
000E:  DATA 31,1D
000F:  DATA 25,26
0010:  DATA 75,05
0011:  DATA 41,22
0012:  DATA 43,19
0013:  DATA BA,12
0014:  DATA CC,3A
0015:  DATA 00,00
*
00E0:  MOVF   0B,W
00E1:  MOVWF  26
00E2:  BCF    0B.7
00E3:  BSF    03.5
00E4:  BSF    03.6
00E5:  BSF    0C.7
00E6:  BSF    0C.0
00E7:  NOP
00E8:  NOP
00E9:  BCF    03.5
00EA:  BCF    03.6
00EB:  BTFSC  26.7
00EC:  BSF    0B.7
00ED:  BTFSC  03.0
00EE:  GOTO   117
00EF:  BSF    03.6
00F0:  MOVF   0C,W
00F1:  ANDLW  7F
00F2:  BCF    03.6
00F3:  MOVWF  26
00F4:  BSF    03.6
00F5:  MOVF   0D,W
00F6:  BCF    03.6
00F7:  MOVWF  27
00F8:  BSF    03.6
00F9:  MOVF   0F,W
00FA:  BCF    03.6
00FB:  MOVWF  28
00FC:  MOVF   26,W
00FD:  MOVWF  2E
00FE:  CALL   0AC
00FF:  MOVF   27,W
0100:  BSF    03.6
0101:  MOVWF  0D
0102:  BCF    03.6
0103:  MOVF   28,W
0104:  BSF    03.6
0105:  MOVWF  0F
0106:  BCF    03.6
0107:  MOVF   0B,W
0108:  MOVWF  29
0109:  BCF    0B.7
010A:  BSF    03.5
010B:  BSF    03.6
010C:  BSF    0C.7
010D:  BSF    0C.0
010E:  NOP
010F:  NOP
0110:  BCF    03.5
0111:  BCF    03.6
0112:  BTFSC  29.7
0113:  BSF    0B.7
0114:  DECFSZ 25,F
0115:  GOTO   117
0116:  GOTO   136
0117:  BSF    03.6
0118:  RLF    0C,W
0119:  RLF    0E,W
011A:  ANDLW  7F
011B:  BCF    03.6
011C:  MOVWF  26
011D:  BSF    03.6
011E:  MOVF   0D,W
011F:  BCF    03.6
0120:  MOVWF  27
0121:  BSF    03.6
0122:  MOVF   0F,W
0123:  BCF    03.6
0124:  MOVWF  28
0125:  MOVF   26,W
0126:  MOVWF  2E
0127:  CALL   0AC
0128:  MOVF   27,W
0129:  BSF    03.6
012A:  MOVWF  0D
012B:  BCF    03.6
012C:  MOVF   28,W
012D:  BSF    03.6
012E:  MOVWF  0F
012F:  INCF   0D,F
0130:  BTFSC  03.2
0131:  INCF   0F,F
0132:  BCF    03.0
0133:  BCF    03.6
0134:  DECFSZ 25,F
0135:  GOTO   0E0
0136:  RETURN
0137:  CLRF   2D
0138:  MOVF   04,W
0139:  MOVWF  2C
013A:  BCF    2D.0
013B:  BTFSC  03.7
013C:  BSF    2D.0
013D:  SWAPF  26,W
013E:  IORLW  F0
013F:  MOVWF  28
0140:  ADDWF  28,F
0141:  ADDLW  E2
0142:  MOVWF  29
0143:  ADDLW  32
0144:  MOVWF  2B
0145:  MOVF   26,W
0146:  ANDLW  0F
0147:  ADDWF  29,F
0148:  ADDWF  29,F
0149:  ADDWF  2B,F
014A:  ADDLW  E9
014B:  MOVWF  2A
014C:  ADDWF  2A,F
014D:  ADDWF  2A,F
014E:  SWAPF  25,W
014F:  ANDLW  0F
0150:  ADDWF  2A,F
0151:  ADDWF  2B,F
0152:  RLF    2A,F
0153:  RLF    2B,F
0154:  COMF   2B,F
0155:  RLF    2B,F
0156:  MOVF   25,W
0157:  ANDLW  0F
0158:  ADDWF  2B,F
0159:  RLF    28,F
015A:  MOVLW  07
015B:  MOVWF  27
015C:  MOVLW  0A
015D:  ADDWF  2B,F
015E:  DECF   2A,F
015F:  BTFSS  03.0
0160:  GOTO   15D
0161:  ADDWF  2A,F
0162:  DECF   29,F
0163:  BTFSS  03.0
0164:  GOTO   161
0165:  ADDWF  29,F
0166:  DECF   28,F
0167:  BTFSS  03.0
0168:  GOTO   165
0169:  ADDWF  28,F
016A:  DECF   27,F
016B:  BTFSS  03.0
016C:  GOTO   169
016D:  MOVLW  27
016E:  MOVWF  04
016F:  BCF    03.7
0170:  MOVLW  07
0171:  ANDWF  2C,W
0172:  BCF    2C.6
0173:  ADDWF  04,F
0174:  MOVLW  2B
0175:  SUBWF  04,W
0176:  BTFSC  03.2
0177:  BSF    2C.6
0178:  MOVF   00,W
0179:  MOVWF  77
017A:  BTFSS  03.2
017B:  GOTO   184
017C:  BTFSC  2C.6
017D:  GOTO   184
017E:  BTFSC  2C.4
017F:  GOTO   196
0180:  BTFSC  2C.3
0181:  GOTO   184
0182:  MOVLW  20
0183:  GOTO   187
0184:  BSF    2C.3
0185:  BCF    2C.4
0186:  MOVLW  30
0187:  ADDWF  77,F
0188:  CLRF   26
0189:  MOVF   04,W
018A:  MOVWF  25
018B:  BCF    26.0
018C:  BTFSC  03.7
018D:  BSF    26.0
018E:  MOVF   77,W
018F:  MOVWF  2E
0190:  CALL   0AC
0191:  MOVF   25,W
0192:  MOVWF  04
0193:  BCF    03.7
0194:  BTFSC  26.0
0195:  BSF    03.7
0196:  INCF   04,F
0197:  BTFSS  2C.6
0198:  GOTO   174
0199:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20Mhz)
*
0016:  MOVLW  2F
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   029
001C:  MOVLW  06
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  7B
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 00,F
0028:  GOTO   01C
0029:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP
.................... //Directiva para utilizar puerto USART
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7)
.................... #include <lcd_d.c> //Incluir librería LCD
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                     The following have special meaning:               ////
.................... ////                      \f  Clear display                                ////
.................... ////                      \n  Go to start of second line                   ////
.................... ////                      \b  Move back one position                       ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... // define the pinout.
.................... #define LCD_DATA_PORT      0x08     //portd    LA PUSE YO 
.................... 
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    BOOLEAN enable;           // on to an I/O port to gain
....................    BOOLEAN rs;               // access to the LCD pins.
....................    BOOLEAN rw;               // The bits are allocated from
....................    BOOLEAN unused;           // low order up.  ENABLE will
....................    int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
.................... 
.................... BYTE lcd_read_nibble(void);
.................... 
.................... BYTE lcd_read_byte(void)
.................... {
....................    BYTE low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0040:  MOVLW  0F
0041:  BSF    03.5
0042:  ANDWF  08,W
0043:  IORLW  F0
0044:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0045:  BCF    03.5
0046:  BSF    08.2
....................    delay_cycles(1);
0047:  NOP
....................    lcd_output_enable(1);
0048:  BSF    08.0
....................    delay_cycles(1);
0049:  NOP
....................    high = lcd_read_nibble();
004A:  CALL   039
004B:  MOVF   78,W
004C:  MOVWF  36
....................       
....................    lcd_output_enable(0);
004D:  BCF    08.0
....................    delay_cycles(1);
004E:  NOP
....................    lcd_output_enable(1);
004F:  BSF    08.0
....................    delay_us(1);
0050:  GOTO   051
0051:  GOTO   052
0052:  NOP
....................    low = lcd_read_nibble();
0053:  CALL   039
0054:  MOVF   78,W
0055:  MOVWF  35
....................       
....................    lcd_output_enable(0);
0056:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0057:  MOVLW  0F
0058:  BSF    03.5
0059:  ANDWF  08,W
005A:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
005B:  BCF    03.5
005C:  SWAPF  36,W
005D:  MOVWF  77
005E:  MOVLW  F0
005F:  ANDWF  77,F
0060:  MOVF   77,W
0061:  IORWF  35,W
0062:  MOVWF  78
.................... }
.................... 
.................... BYTE lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    BYTE n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0039:  MOVF   08,W
003A:  MOVWF  77
003B:  SWAPF  08,W
003C:  ANDLW  0F
003D:  MOVWF  78
....................   #endif
003E:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(BYTE n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
002A:  SWAPF  36,W
002B:  ANDLW  F0
002C:  MOVWF  77
002D:  MOVLW  0F
002E:  ANDWF  08,W
002F:  IORWF  77,W
0030:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0031:  NOP
....................    lcd_output_enable(1);
0032:  BSF    08.0
....................    delay_us(2);
0033:  MOVLW  03
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
....................    lcd_output_enable(0);
0037:  BCF    08.0
0038:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(BYTE address, BYTE n)
.................... {
....................    lcd_output_rs(0);
*
003F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0063:  MOVF   78,W
0064:  MOVWF  35
0065:  BTFSC  35.7
0066:  GOTO   040
....................    lcd_output_rs(address);
0067:  BTFSS  33.0
0068:  BCF    08.1
0069:  BTFSC  33.0
006A:  BSF    08.1
....................    delay_cycles(1);
006B:  NOP
....................    lcd_output_rw(0);
006C:  BCF    08.2
....................    delay_cycles(1);
006D:  NOP
....................    lcd_output_enable(0);
006E:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
006F:  SWAPF  34,W
0070:  MOVWF  35
0071:  MOVLW  0F
0072:  ANDWF  35,F
0073:  MOVF   35,W
0074:  MOVWF  36
0075:  CALL   02A
....................    lcd_send_nibble(n & 0xf);
0076:  MOVF   34,W
0077:  ANDLW  0F
0078:  MOVWF  35
0079:  MOVWF  36
007A:  CALL   02A
007B:  RETURN
.................... }
.................... 
.................... void lcd_init(void) 
.................... {
....................    BYTE i;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007C:  MOVLW  0F
007D:  BSF    03.5
007E:  ANDWF  08,W
007F:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0080:  BCF    08.0
....................    lcd_rs_tris();
0081:  BCF    08.1
....................    lcd_rw_tris();
0082:  BCF    08.2
....................  #endif
.................... 
....................    lcd_output_rs(0);
0083:  BCF    03.5
0084:  BCF    08.1
....................    lcd_output_rw(0);
0085:  BCF    08.2
....................    lcd_output_enable(0);
0086:  BCF    08.0
....................     
....................    delay_ms(15);
0087:  MOVLW  0F
0088:  MOVWF  2F
0089:  CALL   016
....................    for(i=1;i<=3;++i)
008A:  MOVLW  01
008B:  MOVWF  25
008C:  MOVF   25,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    {
....................        lcd_send_nibble(3);
0090:  MOVLW  03
0091:  MOVWF  36
0092:  CALL   02A
....................        delay_ms(5);
0093:  MOVLW  05
0094:  MOVWF  2F
0095:  CALL   016
0096:  INCF   25,F
0097:  GOTO   08C
....................    }
....................     
....................    lcd_send_nibble(2);
0098:  MOVLW  02
0099:  MOVWF  36
009A:  CALL   02A
....................    for(i=0;i<=3;++i)
009B:  CLRF   25
009C:  MOVF   25,W
009D:  SUBLW  03
009E:  BTFSS  03.0
009F:  GOTO   0A9
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A0:  MOVF   25,W
00A1:  CALL   004
00A2:  MOVWF  26
00A3:  CLRF   33
00A4:  MOVF   26,W
00A5:  MOVWF  34
00A6:  CALL   03F
00A7:  INCF   25,F
00A8:  GOTO   09C
00A9:  BCF    0A.3
00AA:  BCF    0A.4
00AB:  GOTO   1AF (RETURN)
.................... }
.................... 
.................... void lcd_gotoxy(BYTE x, BYTE y)
.................... {
....................    BYTE address;
.................... 
....................    if(y!=1)
*
00C3:  DECFSZ 30,W
00C4:  GOTO   0C6
00C5:  GOTO   0C9
....................       address=LCD_LINE_TWO;
00C6:  MOVLW  40
00C7:  MOVWF  31
00C8:  GOTO   0CA
....................    else
....................       address=0;
00C9:  CLRF   31
....................      
....................    address+=x-1;
00CA:  MOVLW  01
00CB:  SUBWF  2F,W
00CC:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address);
00CD:  MOVF   31,W
00CE:  IORLW  80
00CF:  MOVWF  32
00D0:  CLRF   33
00D1:  MOVF   32,W
00D2:  MOVWF  34
00D3:  CALL   03F
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
*
00AC:  MOVF   2E,W
00AD:  XORLW  0C
00AE:  BTFSC  03.2
00AF:  GOTO   0B7
00B0:  XORLW  06
00B1:  BTFSC  03.2
00B2:  GOTO   0BF
00B3:  XORLW  02
00B4:  BTFSC  03.2
00B5:  GOTO   0D5
00B6:  GOTO   0DA
....................    {
....................       case '\f'   :  lcd_send_byte(0,1);
00B7:  CLRF   33
00B8:  MOVLW  01
00B9:  MOVWF  34
00BA:  CALL   03F
....................                      delay_ms(2);
00BB:  MOVLW  02
00BC:  MOVWF  2F
00BD:  CALL   016
....................                      break;
00BE:  GOTO   0DF
....................                      
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00BF:  MOVLW  01
00C0:  MOVWF  2F
00C1:  MOVLW  02
00C2:  MOVWF  30
*
00D4:  GOTO   0DF
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00D5:  CLRF   33
00D6:  MOVLW  10
00D7:  MOVWF  34
00D8:  CALL   03F
00D9:  GOTO   0DF
....................      
....................       default     : lcd_send_byte(1,c);     break;
00DA:  MOVLW  01
00DB:  MOVWF  33
00DC:  MOVF   2E,W
00DD:  MOVWF  34
00DE:  CALL   03F
....................    }
00DF:  RETURN
.................... }
....................  
.................... char lcd_getc(BYTE x, BYTE y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... 
.................... 
.................... void main()
*
019A:  MOVF   03,W
019B:  ANDLW  1F
019C:  MOVWF  03
019D:  MOVLW  81
019E:  BSF    03.5
019F:  MOVWF  19
01A0:  MOVLW  A6
01A1:  MOVWF  18
01A2:  MOVLW  90
01A3:  BCF    03.5
01A4:  MOVWF  18
01A5:  BSF    03.5
01A6:  BSF    1F.0
01A7:  BSF    1F.1
01A8:  BSF    1F.2
01A9:  BCF    1F.3
01AA:  MOVLW  07
01AB:  MOVWF  1C
01AC:  BCF    03.7
.................... {
....................    lcd_init(); //Inicializar pantalla
01AD:  BCF    03.5
01AE:  GOTO   07C
....................    //kbd_init(); //Inicializar teclado
....................    setup_uart(9600); //Configurar baudios
01AF:  MOVLW  81
01B0:  BSF    03.5
01B1:  MOVWF  19
01B2:  MOVLW  A6
01B3:  MOVWF  18
01B4:  MOVLW  90
01B5:  BCF    03.5
01B6:  MOVWF  18
....................    setup_adc(ADC_CLOCK_INTERNAL);
01B7:  BSF    03.5
01B8:  BCF    1F.6
01B9:  BCF    03.5
01BA:  BSF    1F.6
01BB:  BSF    1F.7
01BC:  BSF    03.5
01BD:  BSF    1F.7
01BE:  BCF    03.5
01BF:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN3);
01C0:  BSF    03.5
01C1:  BCF    1F.0
01C2:  BCF    1F.1
01C3:  BSF    1F.2
01C4:  BCF    1F.3
....................    int16 POT1;
....................    int16 POT2;
....................    
....................    while(TRUE)
....................    {
....................       set_adc_channel(0);
01C5:  MOVLW  00
01C6:  MOVWF  78
01C7:  BCF    03.5
01C8:  MOVF   1F,W
01C9:  ANDLW  C7
01CA:  IORWF  78,W
01CB:  MOVWF  1F
....................       delay_us(40);
01CC:  MOVLW  42
01CD:  MOVWF  77
01CE:  DECFSZ 77,F
01CF:  GOTO   1CE
01D0:  NOP
....................       POT1 = read_adc();
01D1:  BSF    1F.2
01D2:  BTFSC  1F.2
01D3:  GOTO   1D2
01D4:  MOVF   1E,W
01D5:  MOVWF  79
01D6:  BSF    03.5
01D7:  MOVF   1E,W
01D8:  MOVWF  78
01D9:  MOVF   79,W
01DA:  BCF    03.5
01DB:  MOVWF  22
01DC:  MOVF   78,W
01DD:  MOVWF  21
....................       set_adc_channel(1);
01DE:  MOVLW  08
01DF:  MOVWF  78
01E0:  MOVF   1F,W
01E1:  ANDLW  C7
01E2:  IORWF  78,W
01E3:  MOVWF  1F
....................       delay_us(40);
01E4:  MOVLW  42
01E5:  MOVWF  77
01E6:  DECFSZ 77,F
01E7:  GOTO   1E6
01E8:  NOP
....................       POT2 = read_adc();
01E9:  BSF    1F.2
01EA:  BTFSC  1F.2
01EB:  GOTO   1EA
01EC:  MOVF   1E,W
01ED:  MOVWF  79
01EE:  BSF    03.5
01EF:  MOVF   1E,W
01F0:  MOVWF  78
01F1:  MOVF   79,W
01F2:  BCF    03.5
01F3:  MOVWF  24
01F4:  MOVF   78,W
01F5:  MOVWF  23
....................       printf(lcd_putc,"\fADC1:%Lu\nADC2:%Lu",POT1,POT2);
01F6:  MOVLW  0C
01F7:  BSF    03.6
01F8:  MOVWF  0D
01F9:  MOVLW  00
01FA:  MOVWF  0F
01FB:  BCF    03.0
01FC:  MOVLW  06
01FD:  BCF    03.6
01FE:  MOVWF  25
01FF:  CALL   0E0
0200:  MOVLW  10
0201:  MOVWF  04
0202:  MOVF   22,W
0203:  MOVWF  26
0204:  MOVF   21,W
0205:  MOVWF  25
0206:  CALL   137
0207:  MOVLW  10
0208:  BSF    03.6
0209:  MOVWF  0D
020A:  MOVLW  00
020B:  MOVWF  0F
020C:  BSF    03.0
020D:  MOVLW  06
020E:  BCF    03.6
020F:  MOVWF  25
0210:  CALL   0E0
0211:  MOVLW  10
0212:  MOVWF  04
0213:  MOVF   24,W
0214:  MOVWF  26
0215:  MOVF   23,W
0216:  MOVWF  25
0217:  CALL   137
....................       delay_ms(100);
0218:  MOVLW  64
0219:  MOVWF  2F
021A:  CALL   016
021B:  BSF    03.5
021C:  GOTO   1C5
....................    }
.................... }
021D:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
