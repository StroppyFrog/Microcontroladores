CCS PCM C Compiler, Version 5.112, 29001               30-may.-23 21:30

               Filename:   C:\Users\strop\OneDrive\Documentos\GitHub\Microcontroladores\Examen_U4\Examen_U4.lst

               ROM used:   613 words (7%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           33 (9%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   19F
0003:  NOP
.................... // Transmisor 
.................... #include <16F877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,20
000D:  DATA 31,10
000E:  DATA A0,20
000F:  DATA 32,10
0010:  DATA A0,20
0011:  DATA 33,05
0012:  DATA 25,26
0013:  DATA 75,16
0014:  DATA A0,12
0015:  DATA CC,3A
0016:  DATA 2C,10
0017:  DATA 25,26
0018:  DATA 75,00
*
00E3:  MOVF   0B,W
00E4:  MOVWF  2B
00E5:  BCF    0B.7
00E6:  BSF    03.5
00E7:  BSF    03.6
00E8:  BSF    0C.7
00E9:  BSF    0C.0
00EA:  NOP
00EB:  NOP
00EC:  BCF    03.5
00ED:  BCF    03.6
00EE:  BTFSC  2B.7
00EF:  BSF    0B.7
00F0:  BTFSC  03.0
00F1:  GOTO   11A
00F2:  BSF    03.6
00F3:  MOVF   0C,W
00F4:  ANDLW  7F
00F5:  BCF    03.6
00F6:  MOVWF  2B
00F7:  BSF    03.6
00F8:  MOVF   0D,W
00F9:  BCF    03.6
00FA:  MOVWF  2C
00FB:  BSF    03.6
00FC:  MOVF   0F,W
00FD:  BCF    03.6
00FE:  MOVWF  2D
00FF:  MOVF   2B,W
0100:  MOVWF  33
0101:  CALL   0AF
0102:  MOVF   2C,W
0103:  BSF    03.6
0104:  MOVWF  0D
0105:  BCF    03.6
0106:  MOVF   2D,W
0107:  BSF    03.6
0108:  MOVWF  0F
0109:  BCF    03.6
010A:  MOVF   0B,W
010B:  MOVWF  2E
010C:  BCF    0B.7
010D:  BSF    03.5
010E:  BSF    03.6
010F:  BSF    0C.7
0110:  BSF    0C.0
0111:  NOP
0112:  NOP
0113:  BCF    03.5
0114:  BCF    03.6
0115:  BTFSC  2E.7
0116:  BSF    0B.7
0117:  DECFSZ 2A,F
0118:  GOTO   11A
0119:  GOTO   139
011A:  BSF    03.6
011B:  RLF    0C,W
011C:  RLF    0E,W
011D:  ANDLW  7F
011E:  BCF    03.6
011F:  MOVWF  2B
0120:  BSF    03.6
0121:  MOVF   0D,W
0122:  BCF    03.6
0123:  MOVWF  2C
0124:  BSF    03.6
0125:  MOVF   0F,W
0126:  BCF    03.6
0127:  MOVWF  2D
0128:  MOVF   2B,W
0129:  MOVWF  33
012A:  CALL   0AF
012B:  MOVF   2C,W
012C:  BSF    03.6
012D:  MOVWF  0D
012E:  BCF    03.6
012F:  MOVF   2D,W
0130:  BSF    03.6
0131:  MOVWF  0F
0132:  INCF   0D,F
0133:  BTFSC  03.2
0134:  INCF   0F,F
0135:  BCF    03.0
0136:  BCF    03.6
0137:  DECFSZ 2A,F
0138:  GOTO   0E3
0139:  BCF    0A.3
013A:  BCF    0A.4
013B:  GOTO   232 (RETURN)
013C:  CLRF   32
013D:  MOVF   04,W
013E:  MOVWF  31
013F:  BCF    32.0
0140:  BTFSC  03.7
0141:  BSF    32.0
0142:  SWAPF  2B,W
0143:  IORLW  F0
0144:  MOVWF  2D
0145:  ADDWF  2D,F
0146:  ADDLW  E2
0147:  MOVWF  2E
0148:  ADDLW  32
0149:  MOVWF  30
014A:  MOVF   2B,W
014B:  ANDLW  0F
014C:  ADDWF  2E,F
014D:  ADDWF  2E,F
014E:  ADDWF  30,F
014F:  ADDLW  E9
0150:  MOVWF  2F
0151:  ADDWF  2F,F
0152:  ADDWF  2F,F
0153:  SWAPF  2A,W
0154:  ANDLW  0F
0155:  ADDWF  2F,F
0156:  ADDWF  30,F
0157:  RLF    2F,F
0158:  RLF    30,F
0159:  COMF   30,F
015A:  RLF    30,F
015B:  MOVF   2A,W
015C:  ANDLW  0F
015D:  ADDWF  30,F
015E:  RLF    2D,F
015F:  MOVLW  07
0160:  MOVWF  2C
0161:  MOVLW  0A
0162:  ADDWF  30,F
0163:  DECF   2F,F
0164:  BTFSS  03.0
0165:  GOTO   162
0166:  ADDWF  2F,F
0167:  DECF   2E,F
0168:  BTFSS  03.0
0169:  GOTO   166
016A:  ADDWF  2E,F
016B:  DECF   2D,F
016C:  BTFSS  03.0
016D:  GOTO   16A
016E:  ADDWF  2D,F
016F:  DECF   2C,F
0170:  BTFSS  03.0
0171:  GOTO   16E
0172:  MOVLW  2C
0173:  MOVWF  04
0174:  BCF    03.7
0175:  MOVLW  07
0176:  ANDWF  31,W
0177:  BCF    31.6
0178:  ADDWF  04,F
0179:  MOVLW  30
017A:  SUBWF  04,W
017B:  BTFSC  03.2
017C:  BSF    31.6
017D:  MOVF   00,W
017E:  MOVWF  77
017F:  BTFSS  03.2
0180:  GOTO   189
0181:  BTFSC  31.6
0182:  GOTO   189
0183:  BTFSC  31.4
0184:  GOTO   19B
0185:  BTFSC  31.3
0186:  GOTO   189
0187:  MOVLW  20
0188:  GOTO   18C
0189:  BSF    31.3
018A:  BCF    31.4
018B:  MOVLW  30
018C:  ADDWF  77,F
018D:  CLRF   2B
018E:  MOVF   04,W
018F:  MOVWF  2A
0190:  BCF    2B.0
0191:  BTFSC  03.7
0192:  BSF    2B.0
0193:  MOVF   77,W
0194:  MOVWF  33
0195:  CALL   0AF
0196:  MOVF   2A,W
0197:  MOVWF  04
0198:  BCF    03.7
0199:  BTFSC  2B.0
019A:  BSF    03.7
019B:  INCF   04,F
019C:  BTFSS  31.6
019D:  GOTO   179
019E:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20Mhz)
*
0019:  MOVLW  34
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02C
001F:  MOVLW  06
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  7B
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  DECFSZ 00,F
002B:  GOTO   01F
002C:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP
.................... //Directiva para utilizar puerto USART
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7)
.................... #include <lcd_d.c> //Incluir librería LCD
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                     The following have special meaning:               ////
.................... ////                      \f  Clear display                                ////
.................... ////                      \n  Go to start of second line                   ////
.................... ////                      \b  Move back one position                       ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... // define the pinout.
.................... #define LCD_DATA_PORT      0x08     //portd    LA PUSE YO 
.................... 
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    BOOLEAN enable;           // on to an I/O port to gain
....................    BOOLEAN rs;               // access to the LCD pins.
....................    BOOLEAN rw;               // The bits are allocated from
....................    BOOLEAN unused;           // low order up.  ENABLE will
....................    int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
.................... 
.................... BYTE lcd_read_nibble(void);
.................... 
.................... BYTE lcd_read_byte(void)
.................... {
....................    BYTE low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0043:  MOVLW  0F
0044:  BSF    03.5
0045:  ANDWF  08,W
0046:  IORLW  F0
0047:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0048:  BCF    03.5
0049:  BSF    08.2
....................    delay_cycles(1);
004A:  NOP
....................    lcd_output_enable(1);
004B:  BSF    08.0
....................    delay_cycles(1);
004C:  NOP
....................    high = lcd_read_nibble();
004D:  CALL   03C
004E:  MOVF   78,W
004F:  MOVWF  3B
....................       
....................    lcd_output_enable(0);
0050:  BCF    08.0
....................    delay_cycles(1);
0051:  NOP
....................    lcd_output_enable(1);
0052:  BSF    08.0
....................    delay_us(1);
0053:  GOTO   054
0054:  GOTO   055
0055:  NOP
....................    low = lcd_read_nibble();
0056:  CALL   03C
0057:  MOVF   78,W
0058:  MOVWF  3A
....................       
....................    lcd_output_enable(0);
0059:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
005A:  MOVLW  0F
005B:  BSF    03.5
005C:  ANDWF  08,W
005D:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
005E:  BCF    03.5
005F:  SWAPF  3B,W
0060:  MOVWF  77
0061:  MOVLW  F0
0062:  ANDWF  77,F
0063:  MOVF   77,W
0064:  IORWF  3A,W
0065:  MOVWF  78
.................... }
.................... 
.................... BYTE lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    BYTE n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
003C:  MOVF   08,W
003D:  MOVWF  77
003E:  SWAPF  08,W
003F:  ANDLW  0F
0040:  MOVWF  78
....................   #endif
0041:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(BYTE n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
002D:  SWAPF  3B,W
002E:  ANDLW  F0
002F:  MOVWF  77
0030:  MOVLW  0F
0031:  ANDWF  08,W
0032:  IORWF  77,W
0033:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
0034:  NOP
....................    lcd_output_enable(1);
0035:  BSF    08.0
....................    delay_us(2);
0036:  MOVLW  03
0037:  MOVWF  77
0038:  DECFSZ 77,F
0039:  GOTO   038
....................    lcd_output_enable(0);
003A:  BCF    08.0
003B:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(BYTE address, BYTE n)
.................... {
....................    lcd_output_rs(0);
*
0042:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0066:  MOVF   78,W
0067:  MOVWF  3A
0068:  BTFSC  3A.7
0069:  GOTO   043
....................    lcd_output_rs(address);
006A:  BTFSS  38.0
006B:  BCF    08.1
006C:  BTFSC  38.0
006D:  BSF    08.1
....................    delay_cycles(1);
006E:  NOP
....................    lcd_output_rw(0);
006F:  BCF    08.2
....................    delay_cycles(1);
0070:  NOP
....................    lcd_output_enable(0);
0071:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
0072:  SWAPF  39,W
0073:  MOVWF  3A
0074:  MOVLW  0F
0075:  ANDWF  3A,F
0076:  MOVF   3A,W
0077:  MOVWF  3B
0078:  CALL   02D
....................    lcd_send_nibble(n & 0xf);
0079:  MOVF   39,W
007A:  ANDLW  0F
007B:  MOVWF  3A
007C:  MOVWF  3B
007D:  CALL   02D
007E:  RETURN
.................... }
.................... 
.................... void lcd_init(void) 
.................... {
....................    BYTE i;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  08,W
0082:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
0083:  BCF    08.0
....................    lcd_rs_tris();
0084:  BCF    08.1
....................    lcd_rw_tris();
0085:  BCF    08.2
....................  #endif
.................... 
....................    lcd_output_rs(0);
0086:  BCF    03.5
0087:  BCF    08.1
....................    lcd_output_rw(0);
0088:  BCF    08.2
....................    lcd_output_enable(0);
0089:  BCF    08.0
....................     
....................    delay_ms(15);
008A:  MOVLW  0F
008B:  MOVWF  34
008C:  CALL   019
....................    for(i=1;i<=3;++i)
008D:  MOVLW  01
008E:  MOVWF  2A
008F:  MOVF   2A,W
0090:  SUBLW  03
0091:  BTFSS  03.0
0092:  GOTO   09B
....................    {
....................        lcd_send_nibble(3);
0093:  MOVLW  03
0094:  MOVWF  3B
0095:  CALL   02D
....................        delay_ms(5);
0096:  MOVLW  05
0097:  MOVWF  34
0098:  CALL   019
0099:  INCF   2A,F
009A:  GOTO   08F
....................    }
....................     
....................    lcd_send_nibble(2);
009B:  MOVLW  02
009C:  MOVWF  3B
009D:  CALL   02D
....................    for(i=0;i<=3;++i)
009E:  CLRF   2A
009F:  MOVF   2A,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00A3:  MOVF   2A,W
00A4:  CALL   004
00A5:  MOVWF  2B
00A6:  CLRF   38
00A7:  MOVF   2B,W
00A8:  MOVWF  39
00A9:  CALL   042
00AA:  INCF   2A,F
00AB:  GOTO   09F
00AC:  BCF    0A.3
00AD:  BCF    0A.4
00AE:  GOTO   1B4 (RETURN)
.................... }
.................... 
.................... void lcd_gotoxy(BYTE x, BYTE y)
.................... {
....................    BYTE address;
.................... 
....................    if(y!=1)
*
00C6:  DECFSZ 35,W
00C7:  GOTO   0C9
00C8:  GOTO   0CC
....................       address=LCD_LINE_TWO;
00C9:  MOVLW  40
00CA:  MOVWF  36
00CB:  GOTO   0CD
....................    else
....................       address=0;
00CC:  CLRF   36
....................      
....................    address+=x-1;
00CD:  MOVLW  01
00CE:  SUBWF  34,W
00CF:  ADDWF  36,F
....................    lcd_send_byte(0,0x80|address);
00D0:  MOVF   36,W
00D1:  IORLW  80
00D2:  MOVWF  37
00D3:  CLRF   38
00D4:  MOVF   37,W
00D5:  MOVWF  39
00D6:  CALL   042
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
*
00AF:  MOVF   33,W
00B0:  XORLW  0C
00B1:  BTFSC  03.2
00B2:  GOTO   0BA
00B3:  XORLW  06
00B4:  BTFSC  03.2
00B5:  GOTO   0C2
00B6:  XORLW  02
00B7:  BTFSC  03.2
00B8:  GOTO   0D8
00B9:  GOTO   0DD
....................    {
....................       case '\f'   :  lcd_send_byte(0,1);
00BA:  CLRF   38
00BB:  MOVLW  01
00BC:  MOVWF  39
00BD:  CALL   042
....................                      delay_ms(2);
00BE:  MOVLW  02
00BF:  MOVWF  34
00C0:  CALL   019
....................                      break;
00C1:  GOTO   0E2
....................                      
....................       case '\n'   : lcd_gotoxy(1,2);        break;
00C2:  MOVLW  01
00C3:  MOVWF  34
00C4:  MOVLW  02
00C5:  MOVWF  35
*
00D7:  GOTO   0E2
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
00D8:  CLRF   38
00D9:  MOVLW  10
00DA:  MOVWF  39
00DB:  CALL   042
00DC:  GOTO   0E2
....................      
....................       default     : lcd_send_byte(1,c);     break;
00DD:  MOVLW  01
00DE:  MOVWF  38
00DF:  MOVF   33,W
00E0:  MOVWF  39
00E1:  CALL   042
....................    }
00E2:  RETURN
.................... }
....................  
.................... char lcd_getc(BYTE x, BYTE y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... 
.................... 
.................... void main()
*
019F:  MOVF   03,W
01A0:  ANDLW  1F
01A1:  MOVWF  03
01A2:  MOVLW  81
01A3:  BSF    03.5
01A4:  MOVWF  19
01A5:  MOVLW  A6
01A6:  MOVWF  18
01A7:  MOVLW  90
01A8:  BCF    03.5
01A9:  MOVWF  18
01AA:  BSF    03.5
01AB:  BSF    1F.0
01AC:  BSF    1F.1
01AD:  BSF    1F.2
01AE:  BCF    1F.3
01AF:  MOVLW  07
01B0:  MOVWF  1C
01B1:  BCF    03.7
.................... {
....................    lcd_init(); //Inicializar pantalla
01B2:  BCF    03.5
01B3:  GOTO   07F
....................    //kbd_init(); //Inicializar teclado
....................    setup_uart(9600); //Configurar baudios
01B4:  MOVLW  81
01B5:  BSF    03.5
01B6:  MOVWF  19
01B7:  MOVLW  A6
01B8:  MOVWF  18
01B9:  MOVLW  90
01BA:  BCF    03.5
01BB:  MOVWF  18
....................    setup_adc(ADC_CLOCK_INTERNAL);
01BC:  BSF    03.5
01BD:  BCF    1F.6
01BE:  BCF    03.5
01BF:  BSF    1F.6
01C0:  BSF    1F.7
01C1:  BSF    03.5
01C2:  BSF    1F.7
01C3:  BCF    03.5
01C4:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_AN3);
01C5:  BSF    03.5
01C6:  BCF    1F.0
01C7:  BCF    1F.1
01C8:  BSF    1F.2
01C9:  BCF    1F.3
....................    int16 POT1, POT2, POT3;
....................    int8 byte1, byte2, byte3;
....................    
....................    while(TRUE)
....................    {
....................       set_adc_channel(0);
01CA:  MOVLW  00
01CB:  MOVWF  78
01CC:  BCF    03.5
01CD:  MOVF   1F,W
01CE:  ANDLW  C7
01CF:  IORWF  78,W
01D0:  MOVWF  1F
....................       POT1 = read_adc();
01D1:  BSF    1F.2
01D2:  BTFSC  1F.2
01D3:  GOTO   1D2
01D4:  MOVF   1E,W
01D5:  MOVWF  79
01D6:  BSF    03.5
01D7:  MOVF   1E,W
01D8:  MOVWF  78
01D9:  MOVF   79,W
01DA:  BCF    03.5
01DB:  MOVWF  22
01DC:  MOVF   78,W
01DD:  MOVWF  21
....................       byte1 = POT1 & 255;
01DE:  MOVF   21,W
01DF:  MOVWF  27
....................       byte2 = (POT1 >> 8) & 255;
01E0:  CLRF   2B
01E1:  MOVF   22,W
01E2:  MOVWF  28
....................       byte3 = 1;
01E3:  MOVLW  01
01E4:  MOVWF  29
....................       delay_us(40);
01E5:  MOVLW  42
01E6:  MOVWF  77
01E7:  DECFSZ 77,F
01E8:  GOTO   1E7
01E9:  NOP
....................       set_adc_channel(1);
01EA:  MOVLW  08
01EB:  MOVWF  78
01EC:  MOVF   1F,W
01ED:  ANDLW  C7
01EE:  IORWF  78,W
01EF:  MOVWF  1F
....................       POT2 = read_adc();
01F0:  BSF    1F.2
01F1:  BTFSC  1F.2
01F2:  GOTO   1F1
01F3:  MOVF   1E,W
01F4:  MOVWF  79
01F5:  BSF    03.5
01F6:  MOVF   1E,W
01F7:  MOVWF  78
01F8:  MOVF   79,W
01F9:  BCF    03.5
01FA:  MOVWF  24
01FB:  MOVF   78,W
01FC:  MOVWF  23
....................       byte1 = POT2 & 255;
01FD:  MOVF   23,W
01FE:  MOVWF  27
....................       byte2 = (POT2 >> 8) & 255;
01FF:  CLRF   2B
0200:  MOVF   24,W
0201:  MOVWF  28
....................       byte3 = 1;
0202:  MOVLW  01
0203:  MOVWF  29
....................       delay_us(40);
0204:  MOVLW  42
0205:  MOVWF  77
0206:  DECFSZ 77,F
0207:  GOTO   206
0208:  NOP
....................       set_adc_channel(3);
0209:  MOVLW  18
020A:  MOVWF  78
020B:  MOVF   1F,W
020C:  ANDLW  C7
020D:  IORWF  78,W
020E:  MOVWF  1F
....................       POT3 = read_adc();
020F:  BSF    1F.2
0210:  BTFSC  1F.2
0211:  GOTO   210
0212:  MOVF   1E,W
0213:  MOVWF  79
0214:  BSF    03.5
0215:  MOVF   1E,W
0216:  MOVWF  78
0217:  MOVF   79,W
0218:  BCF    03.5
0219:  MOVWF  26
021A:  MOVF   78,W
021B:  MOVWF  25
....................       byte1 = POT3 & 255;
021C:  MOVF   25,W
021D:  MOVWF  27
....................       byte2 = (POT3 >> 8) & 255;
021E:  CLRF   2B
021F:  MOVF   26,W
0220:  MOVWF  28
....................       byte3 = 1;
0221:  MOVLW  01
0222:  MOVWF  29
....................       delay_us(40);
0223:  MOVLW  42
0224:  MOVWF  77
0225:  DECFSZ 77,F
0226:  GOTO   225
0227:  NOP
....................       printf(lcd_putc,"\fA1  A2  A3\n%Lu, %Lu, %Lu",POT1,POT2,POT3);
0228:  MOVLW  0C
0229:  BSF    03.6
022A:  MOVWF  0D
022B:  MOVLW  00
022C:  MOVWF  0F
022D:  BCF    03.0
022E:  MOVLW  0C
022F:  BCF    03.6
0230:  MOVWF  2A
0231:  GOTO   0E3
0232:  MOVLW  10
0233:  MOVWF  04
0234:  MOVF   22,W
0235:  MOVWF  2B
0236:  MOVF   21,W
0237:  MOVWF  2A
0238:  CALL   13C
0239:  MOVLW  2C
023A:  MOVWF  33
023B:  CALL   0AF
023C:  MOVLW  20
023D:  MOVWF  33
023E:  CALL   0AF
023F:  MOVLW  10
0240:  MOVWF  04
0241:  MOVF   24,W
0242:  MOVWF  2B
0243:  MOVF   23,W
0244:  MOVWF  2A
0245:  CALL   13C
0246:  MOVLW  2C
0247:  MOVWF  33
0248:  CALL   0AF
0249:  MOVLW  20
024A:  MOVWF  33
024B:  CALL   0AF
024C:  MOVLW  10
024D:  MOVWF  04
024E:  MOVF   26,W
024F:  MOVWF  2B
0250:  MOVF   25,W
0251:  MOVWF  2A
0252:  CALL   13C
....................       putc(byte3);
0253:  MOVF   29,W
0254:  BTFSS  0C.4
0255:  GOTO   254
0256:  MOVWF  19
....................       putc(byte2); 
0257:  MOVF   28,W
0258:  BTFSS  0C.4
0259:  GOTO   258
025A:  MOVWF  19
....................       putc(byte1); 
025B:  MOVF   27,W
025C:  BTFSS  0C.4
025D:  GOTO   25C
025E:  MOVWF  19
....................       delay_ms(100);
025F:  MOVLW  64
0260:  MOVWF  34
0261:  CALL   019
0262:  BSF    03.5
0263:  GOTO   1CA
....................    }
.................... }
0264:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
