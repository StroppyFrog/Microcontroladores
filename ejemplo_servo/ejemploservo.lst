CCS PCM C Compiler, Version 5.015, 5967               19-oct.-23 17:33

               Filename:   C:\Users\strop\OneDrive\Documentos\GitHub\Microcontroladores\ejemplo_servo\ejemploservo.lst

               ROM used:   974 words (12%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           46 (12%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   396
0003:  NOP
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  37
0009:  RETLW  38
000A:  RETLW  39
000B:  RETLW  2F
000C:  RETLW  34
000D:  RETLW  35
000E:  RETLW  36
000F:  RETLW  2A
0010:  RETLW  31
0011:  RETLW  32
0012:  RETLW  33
0013:  RETLW  2D
0014:  RETLW  43
0015:  RETLW  30
0016:  RETLW  3D
0017:  RETLW  2B
0018:  DATA 20,10
0019:  DATA 20,10
001A:  DATA 20,00
001B:  DATA 0C,24
001C:  DATA 6F,36
001D:  DATA E9,39
001E:  DATA 20,1D
001F:  DATA 29,00
0020:  DATA 8C,24
0021:  DATA EE,33
0022:  DATA F2,32
0023:  DATA F3,32
0024:  DATA A0,30
0025:  DATA EE,31
0026:  DATA E8,37
0027:  DATA 3A,00
*
0182:  MOVF   0B,W
0183:  MOVWF  33
0184:  BCF    0B.7
0185:  BSF    03.5
0186:  BSF    03.6
0187:  BSF    0C.7
0188:  BSF    0C.0
0189:  NOP
018A:  NOP
018B:  BCF    03.5
018C:  BCF    03.6
018D:  BTFSC  33.7
018E:  BSF    0B.7
018F:  BSF    03.6
0190:  MOVF   0C,W
0191:  ANDLW  7F
0192:  BTFSC  03.2
0193:  GOTO   1D6
0194:  BCF    03.6
0195:  MOVWF  33
0196:  BSF    03.6
0197:  MOVF   0D,W
0198:  BCF    03.6
0199:  MOVWF  34
019A:  BSF    03.6
019B:  MOVF   0F,W
019C:  BCF    03.6
019D:  MOVWF  35
019E:  MOVF   33,W
019F:  MOVWF  36
01A0:  CALL   156
01A1:  MOVF   34,W
01A2:  BSF    03.6
01A3:  MOVWF  0D
01A4:  BCF    03.6
01A5:  MOVF   35,W
01A6:  BSF    03.6
01A7:  MOVWF  0F
01A8:  BCF    03.6
01A9:  MOVF   0B,W
01AA:  MOVWF  36
01AB:  BCF    0B.7
01AC:  BSF    03.5
01AD:  BSF    03.6
01AE:  BSF    0C.7
01AF:  BSF    0C.0
01B0:  NOP
01B1:  NOP
01B2:  BCF    03.5
01B3:  BCF    03.6
01B4:  BTFSC  36.7
01B5:  BSF    0B.7
01B6:  BSF    03.6
01B7:  RLF    0C,W
01B8:  RLF    0E,W
01B9:  ANDLW  7F
01BA:  BTFSC  03.2
01BB:  GOTO   1D6
01BC:  BCF    03.6
01BD:  MOVWF  33
01BE:  BSF    03.6
01BF:  MOVF   0D,W
01C0:  BCF    03.6
01C1:  MOVWF  34
01C2:  BSF    03.6
01C3:  MOVF   0F,W
01C4:  BCF    03.6
01C5:  MOVWF  35
01C6:  MOVF   33,W
01C7:  MOVWF  36
01C8:  CALL   156
01C9:  MOVF   34,W
01CA:  BSF    03.6
01CB:  MOVWF  0D
01CC:  BCF    03.6
01CD:  MOVF   35,W
01CE:  BSF    03.6
01CF:  MOVWF  0F
01D0:  INCF   0D,F
01D1:  BTFSC  03.2
01D2:  INCF   0F,F
01D3:  BCF    03.6
01D4:  GOTO   182
01D5:  BSF    03.6
01D6:  BCF    03.6
01D7:  RETURN
*
0241:  BCF    0A.0
0242:  BSF    0A.1
0243:  BCF    0A.2
0244:  ADDWF  02,F
0245:  GOTO   1E4
0246:  GOTO   1EA
0247:  GOTO   1F0
0248:  GOTO   1F6
0249:  MOVLW  20
024A:  MOVWF  48
024B:  CLRF   44
024C:  CLRF   45
024D:  CLRF   46
024E:  CLRF   47
024F:  MOVF   3F,W
0250:  MOVWF  7A
0251:  MOVF   3E,W
0252:  MOVWF  79
0253:  MOVF   3D,W
0254:  MOVWF  78
0255:  MOVF   3C,W
0256:  MOVWF  77
0257:  BCF    03.0
0258:  BTFSS  77.0
0259:  GOTO   268
025A:  MOVF   40,W
025B:  ADDWF  44,F
025C:  MOVF   41,W
025D:  BTFSC  03.0
025E:  INCFSZ 41,W
025F:  ADDWF  45,F
0260:  MOVF   42,W
0261:  BTFSC  03.0
0262:  INCFSZ 42,W
0263:  ADDWF  46,F
0264:  MOVF   43,W
0265:  BTFSC  03.0
0266:  INCFSZ 43,W
0267:  ADDWF  47,F
0268:  RRF    47,F
0269:  RRF    46,F
026A:  RRF    45,F
026B:  RRF    44,F
026C:  RRF    7A,F
026D:  RRF    79,F
026E:  RRF    78,F
026F:  RRF    77,F
0270:  DECFSZ 48,F
0271:  GOTO   257
0272:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20Mhz) 
*
0028:  MOVLW  37
0029:  MOVWF  04
002A:  BCF    03.7
002B:  MOVF   00,W
002C:  BTFSC  03.2
002D:  GOTO   03B
002E:  MOVLW  06
002F:  MOVWF  78
0030:  CLRF   77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  DECFSZ 78,F
0034:  GOTO   030
0035:  MOVLW  7B
0036:  MOVWF  77
0037:  DECFSZ 77,F
0038:  GOTO   037
0039:  DECFSZ 00,F
003A:  GOTO   02E
003B:  RETURN
*
034B:  MOVLW  03
034C:  SUBWF  2F,F
034D:  BTFSS  03.0
034E:  GOTO   359
034F:  MOVLW  2F
0350:  MOVWF  04
0351:  BCF    03.7
0352:  MOVF   00,W
0353:  BTFSC  03.2
0354:  GOTO   359
0355:  GOTO   357
0356:  GOTO   357
0357:  DECFSZ 00,F
0358:  GOTO   356
0359:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP 
.................... #define LCD_ENABLE_PIN  PIN_A3                                    //// 
.................... #define LCD_RS_PIN      PIN_A5                                    //// 
.................... #define LCD_RW_PIN      PIN_A4                                    //// 
.................... #define LCD_DATA4       PIN_D4                                    //// 
.................... #define LCD_DATA5       PIN_D5                                    //// 
.................... #define LCD_DATA6       PIN_D6                                    //// 
.................... #define LCD_DATA7       PIN_D7 
.................... #include <lcd.c> //Incluir librería LCD 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A5:  BSF    08.4
....................    output_float(LCD_DATA5); 
00A6:  BSF    08.5
....................    output_float(LCD_DATA6); 
00A7:  BSF    08.6
....................    output_float(LCD_DATA7); 
00A8:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00A9:  BCF    03.5
00AA:  BSF    05.4
00AB:  BSF    03.5
00AC:  BCF    05.4
....................    delay_cycles(1); 
00AD:  NOP
....................    lcd_output_enable(1); 
00AE:  BCF    03.5
00AF:  BSF    05.3
00B0:  BSF    03.5
00B1:  BCF    05.3
....................    delay_cycles(1); 
00B2:  NOP
....................    high = lcd_read_nibble(); 
00B3:  BCF    03.5
00B4:  CALL   06C
00B5:  MOVF   78,W
00B6:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
00B7:  BCF    05.3
00B8:  BSF    03.5
00B9:  BCF    05.3
....................    delay_cycles(1); 
00BA:  NOP
....................    lcd_output_enable(1); 
00BB:  BCF    03.5
00BC:  BSF    05.3
00BD:  BSF    03.5
00BE:  BCF    05.3
....................    delay_us(1); 
00BF:  GOTO   0C0
00C0:  GOTO   0C1
00C1:  NOP
....................    low = lcd_read_nibble(); 
00C2:  BCF    03.5
00C3:  CALL   06C
00C4:  MOVF   78,W
00C5:  MOVWF  3D
....................        
....................    lcd_output_enable(0); 
00C6:  BCF    05.3
00C7:  BSF    03.5
00C8:  BCF    05.3
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C9:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00CA:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00CB:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00CC:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00CD:  BCF    03.5
00CE:  SWAPF  3E,W
00CF:  MOVWF  77
00D0:  MOVLW  F0
00D1:  ANDWF  77,F
00D2:  MOVF   77,W
00D3:  IORWF  3D,W
00D4:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006C:  CLRF   3F
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
006D:  BSF    03.5
006E:  BSF    08.4
006F:  MOVLW  00
0070:  BCF    03.5
0071:  BTFSC  08.4
0072:  MOVLW  01
0073:  IORWF  3F,F
....................    n |= input(LCD_DATA5) << 1; 
0074:  BSF    03.5
0075:  BSF    08.5
0076:  MOVLW  00
0077:  BCF    03.5
0078:  BTFSC  08.5
0079:  MOVLW  01
007A:  MOVWF  77
007B:  BCF    03.0
007C:  RLF    77,F
007D:  MOVF   77,W
007E:  IORWF  3F,F
....................    n |= input(LCD_DATA6) << 2; 
007F:  BSF    03.5
0080:  BSF    08.6
0081:  MOVLW  00
0082:  BCF    03.5
0083:  BTFSC  08.6
0084:  MOVLW  01
0085:  MOVWF  77
0086:  RLF    77,F
0087:  RLF    77,F
0088:  MOVLW  FC
0089:  ANDWF  77,F
008A:  MOVF   77,W
008B:  IORWF  3F,F
....................    n |= input(LCD_DATA7) << 3; 
008C:  BSF    03.5
008D:  BSF    08.7
008E:  MOVLW  00
008F:  BCF    03.5
0090:  BTFSC  08.7
0091:  MOVLW  01
0092:  MOVWF  77
0093:  RLF    77,F
0094:  RLF    77,F
0095:  RLF    77,F
0096:  MOVLW  F8
0097:  ANDWF  77,F
0098:  MOVF   77,W
0099:  IORWF  3F,F
....................     
....................    return(n); 
009A:  MOVF   3F,W
009B:  MOVWF  78
....................   #else 
009C:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
003C:  BTFSC  3E.0
003D:  GOTO   040
003E:  BCF    08.4
003F:  GOTO   041
0040:  BSF    08.4
0041:  BSF    03.5
0042:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0043:  BCF    03.5
0044:  BTFSC  3E.1
0045:  GOTO   048
0046:  BCF    08.5
0047:  GOTO   049
0048:  BSF    08.5
0049:  BSF    03.5
004A:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004B:  BCF    03.5
004C:  BTFSC  3E.2
004D:  GOTO   050
004E:  BCF    08.6
004F:  GOTO   051
0050:  BSF    08.6
0051:  BSF    03.5
0052:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0053:  BCF    03.5
0054:  BTFSC  3E.3
0055:  GOTO   058
0056:  BCF    08.7
0057:  GOTO   059
0058:  BSF    08.7
0059:  BSF    03.5
005A:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
005B:  NOP
....................    lcd_output_enable(1); 
005C:  BCF    03.5
005D:  BSF    05.3
005E:  BSF    03.5
005F:  BCF    05.3
....................    delay_us(2); 
0060:  MOVLW  02
0061:  MOVWF  77
0062:  DECFSZ 77,F
0063:  GOTO   062
0064:  GOTO   065
0065:  NOP
....................    lcd_output_enable(0); 
0066:  BCF    03.5
0067:  BCF    05.3
0068:  BSF    03.5
0069:  BCF    05.3
006A:  BCF    03.5
006B:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
009D:  BSF    03.5
009E:  BCF    05.3
....................    lcd_rs_tris(); 
009F:  BCF    05.5
....................    lcd_rw_tris(); 
00A0:  BCF    05.4
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A1:  BCF    03.5
00A2:  BCF    05.5
00A3:  BSF    03.5
00A4:  BCF    05.5
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D5:  MOVF   78,W
00D6:  MOVWF  3D
00D7:  BTFSS  3D.7
00D8:  GOTO   0DB
00D9:  BSF    03.5
00DA:  GOTO   0A5
....................    lcd_output_rs(address); 
00DB:  MOVF   3B,F
00DC:  BTFSS  03.2
00DD:  GOTO   0E0
00DE:  BCF    05.5
00DF:  GOTO   0E1
00E0:  BSF    05.5
00E1:  BSF    03.5
00E2:  BCF    05.5
....................    delay_cycles(1); 
00E3:  NOP
....................    lcd_output_rw(0); 
00E4:  BCF    03.5
00E5:  BCF    05.4
00E6:  BSF    03.5
00E7:  BCF    05.4
....................    delay_cycles(1); 
00E8:  NOP
....................    lcd_output_enable(0); 
00E9:  BCF    03.5
00EA:  BCF    05.3
00EB:  BSF    03.5
00EC:  BCF    05.3
....................    lcd_send_nibble(n >> 4); 
00ED:  BCF    03.5
00EE:  SWAPF  3C,W
00EF:  MOVWF  3D
00F0:  MOVLW  0F
00F1:  ANDWF  3D,F
00F2:  MOVF   3D,W
00F3:  MOVWF  3E
00F4:  CALL   03C
....................    lcd_send_nibble(n & 0xf); 
00F5:  MOVF   3C,W
00F6:  ANDLW  0F
00F7:  MOVWF  3D
00F8:  MOVWF  3E
00F9:  CALL   03C
00FA:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00FB:  MOVLW  28
00FC:  MOVWF  28
00FD:  MOVLW  0C
00FE:  MOVWF  29
00FF:  MOVLW  01
0100:  MOVWF  2A
0101:  MOVLW  06
0102:  MOVWF  2B
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0103:  BCF    05.3
0104:  BSF    03.5
0105:  BCF    05.3
....................    lcd_output_rs(0); 
0106:  BCF    03.5
0107:  BCF    05.5
0108:  BSF    03.5
0109:  BCF    05.5
....................    lcd_output_rw(0); 
010A:  BCF    03.5
010B:  BCF    05.4
010C:  BSF    03.5
010D:  BCF    05.4
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
010E:  BCF    08.4
....................    output_drive(LCD_DATA5); 
010F:  BCF    08.5
....................    output_drive(LCD_DATA6); 
0110:  BCF    08.6
....................    output_drive(LCD_DATA7); 
0111:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0112:  BCF    05.3
....................    lcd_rs_tris(); 
0113:  BCF    05.5
....................    lcd_rw_tris(); 
0114:  BCF    05.4
....................  #endif 
....................      
....................    delay_ms(15); 
0115:  MOVLW  0F
0116:  BCF    03.5
0117:  MOVWF  37
0118:  CALL   028
....................    for(i=1;i<=3;++i) 
0119:  MOVLW  01
011A:  MOVWF  27
011B:  MOVF   27,W
011C:  SUBLW  03
011D:  BTFSS  03.0
011E:  GOTO   127
....................    { 
....................        lcd_send_nibble(3); 
011F:  MOVLW  03
0120:  MOVWF  3E
0121:  CALL   03C
....................        delay_ms(5); 
0122:  MOVLW  05
0123:  MOVWF  37
0124:  CALL   028
0125:  INCF   27,F
0126:  GOTO   11B
....................    } 
....................     
....................    lcd_send_nibble(2); 
0127:  MOVLW  02
0128:  MOVWF  3E
0129:  CALL   03C
....................    delay_ms(5); 
012A:  MOVLW  05
012B:  MOVWF  37
012C:  CALL   028
....................    for(i=0;i<=3;++i) 
012D:  CLRF   27
012E:  MOVF   27,W
012F:  SUBLW  03
0130:  BTFSS  03.0
0131:  GOTO   13E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0132:  MOVLW  28
0133:  ADDWF  27,W
0134:  MOVWF  04
0135:  BCF    03.7
0136:  MOVF   00,W
0137:  MOVWF  2C
0138:  CLRF   3B
0139:  MOVF   2C,W
013A:  MOVWF  3C
013B:  CALL   09D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013C:  INCF   27,F
013D:  GOTO   12E
013E:  BCF    0A.3
013F:  BCF    0A.4
0140:  GOTO   3A9 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
0144:  DECFSZ 38,W
0145:  GOTO   147
0146:  GOTO   14A
....................       address=LCD_LINE_TWO; 
0147:  MOVLW  40
0148:  MOVWF  39
0149:  GOTO   14B
....................    else 
....................       address=0; 
014A:  CLRF   39
....................       
....................    address+=x-1; 
014B:  MOVLW  01
014C:  SUBWF  37,W
014D:  ADDWF  39,F
....................    lcd_send_byte(0,0x80|address); 
014E:  MOVF   39,W
014F:  IORLW  80
0150:  MOVWF  3A
0151:  CLRF   3B
0152:  MOVF   3A,W
0153:  MOVWF  3C
0154:  CALL   09D
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0155:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0156:  MOVF   36,W
0157:  XORLW  07
0158:  BTFSC  03.2
0159:  GOTO   164
015A:  XORLW  0B
015B:  BTFSC  03.2
015C:  GOTO   169
015D:  XORLW  06
015E:  BTFSC  03.2
015F:  GOTO   171
0160:  XORLW  02
0161:  BTFSC  03.2
0162:  GOTO   177
0163:  GOTO   17C
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0164:  MOVLW  01
0165:  MOVWF  37
0166:  MOVWF  38
0167:  CALL   144
0168:  GOTO   181
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0169:  CLRF   3B
016A:  MOVLW  01
016B:  MOVWF  3C
016C:  CALL   09D
....................                      delay_ms(2); 
016D:  MOVLW  02
016E:  MOVWF  37
016F:  CALL   028
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0170:  GOTO   181
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0171:  MOVLW  01
0172:  MOVWF  37
0173:  MOVLW  02
0174:  MOVWF  38
0175:  CALL   144
0176:  GOTO   181
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0177:  CLRF   3B
0178:  MOVLW  10
0179:  MOVWF  3C
017A:  CALL   09D
017B:  GOTO   181
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
017C:  MOVLW  01
017D:  MOVWF  3B
017E:  MOVF   36,W
017F:  MOVWF  3C
0180:  CALL   09D
....................      #endif 
....................    } 
0181:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <kbd4x4_b.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD4x4_1.C                                //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81                   // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83                   // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                 // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 4) 
.................... #define COL1 (1 << 5) 
.................... #define COL2 (1 << 6) 
.................... #define COL3 (1 << 7) 
....................  
.................... #define ROW0 (1 << 0) 
.................... #define ROW1 (1 << 1) 
.................... #define ROW2 (1 << 2) 
.................... #define ROW3 (1 << 3) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'7','8','9','/'}, 
....................                          {'4','5','6','*'}, 
....................                          {'1','2','3','-'}, 
....................                          {'C','0','=','+'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
0141:  BCF    0A.3
0142:  BCF    0A.4
0143:  GOTO   3AA (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
03A3:  BCF    03.5
03A4:  CLRF   20
....................    static int1 kbd_down; 
03A5:  BCF    21.0
....................    static char last_key; 
03A6:  CLRF   22
....................    static BYTE col; 
03A7:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
01D8:  CLRF   34
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
01D9:  INCF   20,F
01DA:  MOVF   20,W
01DB:  SUBLW  21
01DC:  BTFSC  03.0
01DD:  GOTO   238
....................        switch (col) { 
01DE:  MOVF   23,W
01DF:  ADDLW  FC
01E0:  BTFSC  03.0
01E1:  GOTO   1FB
01E2:  ADDLW  04
01E3:  GOTO   241
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
01E4:  MOVLW  EF
01E5:  BSF    03.5
01E6:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
01E7:  BCF    03.5
01E8:  MOVWF  06
....................                     break; 
01E9:  GOTO   1FB
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
01EA:  MOVLW  DF
01EB:  BSF    03.5
01EC:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
01ED:  BCF    03.5
01EE:  MOVWF  06
....................                     break; 
01EF:  GOTO   1FB
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
01F0:  MOVLW  BF
01F1:  BSF    03.5
01F2:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
01F3:  BCF    03.5
01F4:  MOVWF  06
....................                     break; 
01F5:  GOTO   1FB
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
01F6:  MOVLW  7F
01F7:  BSF    03.5
01F8:  MOVWF  06
....................                     kbd=~COL3&ALL_PINS; 
01F9:  BCF    03.5
01FA:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
01FB:  BTFSS  21.0
01FC:  GOTO   207
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
01FD:  MOVF   06,W
01FE:  ANDLW  0F
01FF:  SUBLW  0F
0200:  BTFSS  03.2
0201:  GOTO   206
....................            kbd_down=FALSE; 
0202:  BCF    21.0
....................            kchar=last_key; 
0203:  MOVF   22,W
0204:  MOVWF  34
....................            last_key='\0'; 
0205:  CLRF   22
....................          } 
....................        } else { 
0206:  GOTO   237
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
0207:  MOVF   06,W
0208:  ANDLW  0F
0209:  SUBLW  0F
020A:  BTFSC  03.2
020B:  GOTO   232
....................              if((kbd & ROW0)==0) 
020C:  MOVF   06,W
020D:  ANDLW  01
020E:  BTFSS  03.2
020F:  GOTO   212
....................                row=0; 
0210:  CLRF   35
0211:  GOTO   226
....................              else if((kbd & ROW1)==0) 
0212:  MOVF   06,W
0213:  ANDLW  02
0214:  BTFSS  03.2
0215:  GOTO   219
....................                row=1; 
0216:  MOVLW  01
0217:  MOVWF  35
0218:  GOTO   226
....................              else if((kbd & ROW2)==0) 
0219:  MOVF   06,W
021A:  ANDLW  04
021B:  BTFSS  03.2
021C:  GOTO   220
....................                row=2; 
021D:  MOVLW  02
021E:  MOVWF  35
021F:  GOTO   226
....................              else if((kbd & ROW3)==0) 
0220:  MOVF   06,W
0221:  ANDLW  08
0222:  BTFSS  03.2
0223:  GOTO   226
....................                row=3; 
0224:  MOVLW  03
0225:  MOVWF  35
....................              last_key =KEYS[row][col]; 
0226:  RLF    35,W
0227:  MOVWF  77
0228:  RLF    77,F
0229:  MOVLW  FC
022A:  ANDWF  77,F
022B:  MOVF   77,W
022C:  ADDWF  23,W
022D:  CALL   004
022E:  MOVWF  78
022F:  MOVWF  22
....................              kbd_down = TRUE; 
0230:  BSF    21.0
....................           } else { 
0231:  GOTO   237
....................              ++col; 
0232:  INCF   23,F
....................              if(col==4) 
0233:  MOVF   23,W
0234:  SUBLW  04
0235:  BTFSC  03.2
....................                col=0; 
0236:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
0237:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
0238:  MOVLW  FF
0239:  BSF    03.5
023A:  MOVWF  06
....................   return(kchar); 
023B:  BCF    03.5
023C:  MOVF   34,W
023D:  MOVWF  78
023E:  BCF    0A.3
023F:  BCF    0A.4
0240:  GOTO   281 (RETURN)
.................... } 
....................  
.................... #include <getNum16.c> 
.................... /* 
....................    ** Se requiere haber inicializado el lcd y el teclado **  
....................     
....................    Usar como "int16 numero = get_num();" no puede borrar numeros 
....................     
....................    Al usar como "int16 numero = get_num_lcd(cursor_x,cursor_y)" 
....................    se pueden borrar caracteres con '-' y con 'C' 
....................        
....................    Por Angel Primitivo Vejar Cortés 2022 | angel-primi@hotmail.com 
.................... */ 
....................  
.................... unsigned int32 pow(int8 base, int8 power){ 
*
02F9:  CLRF   3A
02FA:  CLRF   39
02FB:  CLRF   38
02FC:  MOVLW  01
02FD:  MOVWF  37
....................    int32 result = 1; 
....................    for(int8 i = 0; i < power; i++){ 
02FE:  CLRF   3B
02FF:  MOVF   36,W
0300:  SUBWF  3B,W
0301:  BTFSC  03.0
0302:  GOTO   31B
....................       result *= base; 
0303:  MOVF   3A,W
0304:  MOVWF  3F
0305:  MOVF   39,W
0306:  MOVWF  3E
0307:  MOVF   38,W
0308:  MOVWF  3D
0309:  MOVF   37,W
030A:  MOVWF  3C
030B:  CLRF   43
030C:  CLRF   42
030D:  CLRF   41
030E:  MOVF   35,W
030F:  MOVWF  40
0310:  CALL   249
0311:  MOVF   7A,W
0312:  MOVWF  3A
0313:  MOVF   79,W
0314:  MOVWF  39
0315:  MOVF   78,W
0316:  MOVWF  38
0317:  MOVF   77,W
0318:  MOVWF  37
0319:  INCF   3B,F
031A:  GOTO   2FF
....................    } 
....................    return result; 
031B:  MOVF   37,W
031C:  MOVWF  77
031D:  MOVF   38,W
031E:  MOVWF  78
031F:  MOVF   39,W
0320:  MOVWF  79
0321:  MOVF   3A,W
0322:  MOVWF  7A
.................... } 
....................  
.................... char read_key(){ 
....................    char c; 
....................    do{ 
....................       c=kbd_getc(); 
*
0280:  GOTO   1D8
0281:  MOVF   78,W
0282:  MOVWF  33
....................    } 
....................    while(c=='\0');  
0283:  MOVF   33,F
0284:  BTFSC  03.2
0285:  GOTO   280
....................    return(c); 
0286:  MOVF   33,W
0287:  MOVWF  78
.................... } 
....................  
.................... int16 get_num_lcd(int8 x, int8 y){ 
....................    lcd_gotoxy(x,y); 
*
0273:  MOVF   27,W
0274:  MOVWF  37
0275:  MOVF   28,W
0276:  MOVWF  38
0277:  CALL   144
....................    int16 numero = 0; 
....................    char cadena[5] = {0,0,0,0,0}; 
*
027A:  CLRF   2B
027B:  CLRF   2C
027C:  CLRF   2D
027D:  CLRF   2E
027E:  CLRF   2F
....................    int8 index = 0; 
....................    char tecla; 
*
0278:  CLRF   2A
0279:  CLRF   29
*
027F:  CLRF   30
....................    do { 
....................       tecla = read_key(); 
*
0288:  MOVF   78,W
0289:  MOVWF  31
....................       if((tecla >= 48) && (tecla <= 57))  
028A:  MOVF   31,W
028B:  SUBLW  2F
028C:  BTFSC  03.0
028D:  GOTO   29C
028E:  MOVF   31,W
028F:  SUBLW  39
0290:  BTFSS  03.0
0291:  GOTO   29C
....................       { 
....................          cadena[index] = tecla; 
0292:  MOVLW  2B
0293:  ADDWF  30,W
0294:  MOVWF  04
0295:  BCF    03.7
0296:  MOVF   31,W
0297:  MOVWF  00
....................          index++; 
0298:  INCF   30,F
....................          printf(lcd_putc,"%c",tecla); 
0299:  MOVF   31,W
029A:  MOVWF  36
029B:  CALL   156
....................       } 
....................        
....................       if(tecla == '-' && index > 0){ 
029C:  MOVF   31,W
029D:  SUBLW  2D
029E:  BTFSS  03.2
029F:  GOTO   2BA
02A0:  MOVF   30,F
02A1:  BTFSC  03.2
02A2:  GOTO   2BA
....................          index--; 
02A3:  DECF   30,F
....................          cadena[index] = 0; 
02A4:  MOVLW  2B
02A5:  ADDWF  30,W
02A6:  MOVWF  04
02A7:  BCF    03.7
02A8:  CLRF   00
....................          lcd_gotoxy(x + index,y); 
02A9:  MOVF   30,W
02AA:  ADDWF  27,W
02AB:  MOVWF  33
02AC:  MOVWF  37
02AD:  MOVF   28,W
02AE:  MOVWF  38
02AF:  CALL   144
....................          printf(lcd_putc," "); 
02B0:  MOVLW  20
02B1:  MOVWF  36
02B2:  CALL   156
....................          lcd_gotoxy(x + index,y); 
02B3:  MOVF   30,W
02B4:  ADDWF  27,W
02B5:  MOVWF  33
02B6:  MOVWF  37
02B7:  MOVF   28,W
02B8:  MOVWF  38
02B9:  CALL   144
....................       } 
....................        
....................       if(tecla == 'C' && index > 0){ 
02BA:  MOVF   31,W
02BB:  SUBLW  43
02BC:  BTFSS  03.2
02BD:  GOTO   2D8
02BE:  MOVF   30,F
02BF:  BTFSC  03.2
02C0:  GOTO   2D8
....................          index=0; 
02C1:  CLRF   30
....................          cadena[0] = 0; 
02C2:  CLRF   2B
....................          cadena[1] = 0; 
02C3:  CLRF   2C
....................          cadena[2] = 0; 
02C4:  CLRF   2D
....................          cadena[3] = 0; 
02C5:  CLRF   2E
....................          cadena[4] = 0; 
02C6:  CLRF   2F
....................          lcd_gotoxy(x,y); 
02C7:  MOVF   27,W
02C8:  MOVWF  37
02C9:  MOVF   28,W
02CA:  MOVWF  38
02CB:  CALL   144
....................          printf(lcd_putc,"     "); 
02CC:  MOVLW  18
02CD:  BSF    03.6
02CE:  MOVWF  0D
02CF:  MOVLW  00
02D0:  MOVWF  0F
02D1:  BCF    03.6
02D2:  CALL   182
....................          lcd_gotoxy(x,y); 
02D3:  MOVF   27,W
02D4:  MOVWF  37
02D5:  MOVF   28,W
02D6:  MOVWF  38
02D7:  CALL   144
....................       } 
....................        
....................       if(tecla == '=' && index > 0){ 
02D8:  MOVF   31,W
02D9:  SUBLW  3D
02DA:  BTFSS  03.2
02DB:  GOTO   2DF
02DC:  MOVF   30,F
02DD:  BTFSS  03.2
....................          break;      
02DE:  GOTO   2E3
....................       } 
....................    }while(index < 5); 
02DF:  MOVF   30,W
02E0:  SUBLW  04
02E1:  BTFSC  03.0
02E2:  GOTO   280
....................     
....................    for(int8 i = 0; i < index; i++){ 
02E3:  CLRF   32
02E4:  MOVF   30,W
02E5:  SUBWF  32,W
02E6:  BTFSC  03.0
02E7:  GOTO   344
....................       numero += (cadena[i] - 48) * (pow(10,index - 1 - i)); 
02E8:  MOVLW  2B
02E9:  ADDWF  32,W
02EA:  MOVWF  04
02EB:  BCF    03.7
02EC:  MOVLW  30
02ED:  SUBWF  00,W
02EE:  MOVWF  33
02EF:  MOVLW  01
02F0:  SUBWF  30,W
02F1:  MOVWF  78
02F2:  MOVF   32,W
02F3:  SUBWF  78,W
02F4:  MOVWF  34
02F5:  MOVLW  0A
02F6:  MOVWF  35
02F7:  MOVF   34,W
02F8:  MOVWF  36
*
0323:  CLRF   35
0324:  MOVF   04,W
0325:  MOVWF  34
0326:  BCF    35.0
0327:  BTFSC  03.7
0328:  BSF    35.0
0329:  CLRF   3F
032A:  CLRF   3E
032B:  CLRF   3D
032C:  MOVF   33,W
032D:  MOVWF  3C
032E:  MOVF   7A,W
032F:  MOVWF  43
0330:  MOVF   79,W
0331:  MOVWF  42
0332:  MOVF   78,W
0333:  MOVWF  41
0334:  MOVF   77,W
0335:  MOVWF  40
0336:  CALL   249
0337:  MOVF   34,W
0338:  MOVWF  04
0339:  BCF    03.7
033A:  BTFSC  35.0
033B:  BSF    03.7
033C:  MOVF   77,W
033D:  ADDWF  29,F
033E:  MOVF   78,W
033F:  BTFSC  03.0
0340:  INCFSZ 78,W
0341:  ADDWF  2A,F
0342:  INCF   32,F
0343:  GOTO   2E4
....................    }   
....................    return numero; 
0344:  MOVF   29,W
0345:  MOVWF  78
0346:  MOVF   2A,W
0347:  MOVWF  79
0348:  BCF    0A.3
0349:  BCF    0A.4
034A:  GOTO   3C3 (RETURN)
.................... } 
....................  
.................... int16 get_num() { 
....................    int16 numero = 0; 
....................    char cadena[5] = {0,0,0,0,0}; 
....................    int8 index = 0; 
....................    char tecla; 
....................    do { 
....................       tecla = read_key(); 
....................       if((tecla >= 48) && (tecla <= 57))  
....................       { 
....................          cadena[index] = tecla; 
....................          index++; 
....................          printf(lcd_putc,"%c",tecla); 
....................       } 
....................        
....................       if(tecla == '=' && index > 0){ 
....................          break;      
....................       } 
....................    }while(index < 5); 
....................     
....................    for(int8 i = 0; i < index; i++){ 
....................       numero += (cadena[i] - 48) * (pow(10,index - 1 - i)); 
....................    }   
....................    return numero; 
.................... } 
....................  
....................  
.................... #use STANDARD_IO(C) 
....................  
.................... #define PIN_SERVO PIN_C0 
....................  
....................  
.................... void move_servo(int16 ancho) 
*
035A:  MOVF   28,W
035B:  MOVWF  2A
035C:  MOVF   27,W
035D:  MOVWF  29
035E:  SUBLW  20
035F:  MOVWF  2B
0360:  MOVLW  4E
0361:  MOVWF  2C
0362:  MOVF   2A,W
0363:  BTFSS  03.0
0364:  INCFSZ 2A,W
0365:  SUBWF  2C,F
.................... { 
....................    //float milis = (180.0 + (float)grados) / 180.0; 
....................    //int16 tiempo_alto = (int16)(milis * 1000.0); 
....................    int16 tiempo_alto = ancho; 
....................    int16 tiempo_bajo = 20000 - tiempo_alto; 
....................    for(int8 i = 0; i < 15; i++){ 
0366:  CLRF   2D
0367:  MOVF   2D,W
0368:  SUBLW  0E
0369:  BTFSS  03.0
036A:  GOTO   393
....................       output_high(PIN_SERVO); 
036B:  BCF    24.0
036C:  MOVF   24,W
036D:  BSF    03.5
036E:  MOVWF  07
036F:  BCF    03.5
0370:  BSF    07.0
....................       delay_us(tiempo_alto); 
0371:  MOVF   2A,W
0372:  MOVWF  2E
0373:  INCF   2E,F
0374:  DECF   2E,F
0375:  BTFSC  03.2
0376:  GOTO   37B
0377:  MOVLW  FF
0378:  MOVWF  2F
0379:  CALL   34B
037A:  GOTO   374
037B:  MOVF   29,W
037C:  MOVWF  2F
037D:  CALL   34B
....................       output_low(PIN_SERVO); 
037E:  BCF    24.0
037F:  MOVF   24,W
0380:  BSF    03.5
0381:  MOVWF  07
0382:  BCF    03.5
0383:  BCF    07.0
....................       delay_us(tiempo_bajo); 
0384:  MOVF   2C,W
0385:  MOVWF  2E
0386:  INCF   2E,F
0387:  DECF   2E,F
0388:  BTFSC  03.2
0389:  GOTO   38E
038A:  MOVLW  FF
038B:  MOVWF  2F
038C:  CALL   34B
038D:  GOTO   387
038E:  MOVF   2B,W
038F:  MOVWF  2F
0390:  CALL   34B
0391:  INCF   2D,F
0392:  GOTO   367
....................    } 
0393:  BCF    0A.3
0394:  BCF    0A.4
0395:  GOTO   3CC (RETURN)
.................... } 
....................  
.................... void main(){ 
0396:  MOVF   03,W
0397:  ANDLW  1F
0398:  MOVWF  03
0399:  MOVLW  FF
039A:  MOVWF  24
039B:  BSF    03.5
039C:  BSF    1F.0
039D:  BSF    1F.1
039E:  BSF    1F.2
039F:  BCF    1F.3
03A0:  MOVLW  07
03A1:  MOVWF  1C
03A2:  BCF    03.7
....................    lcd_init(); //Inicializar pantalla 
*
03A8:  GOTO   0FB
....................    kbd_init(); 
03A9:  GOTO   141
....................  
....................    output_low(PIN_SERVO); 
03AA:  BCF    24.0
03AB:  MOVF   24,W
03AC:  BSF    03.5
03AD:  MOVWF  07
03AE:  BCF    03.5
03AF:  BCF    07.0
....................    printf(lcd_putc,"\fHolis :)"); 
03B0:  MOVLW  1B
03B1:  BSF    03.6
03B2:  MOVWF  0D
03B3:  MOVLW  00
03B4:  MOVWF  0F
03B5:  BCF    03.6
03B6:  CALL   182
....................     
....................    int16 grados_deseados; 
....................    while(1){ 
....................       printf(lcd_putc,"\fIngrese ancho:"); 
03B7:  MOVLW  20
03B8:  BSF    03.6
03B9:  MOVWF  0D
03BA:  MOVLW  00
03BB:  MOVWF  0F
03BC:  BCF    03.6
03BD:  CALL   182
....................       grados_deseados = get_num_lcd(1,2); 
03BE:  MOVLW  01
03BF:  MOVWF  27
03C0:  MOVLW  02
03C1:  MOVWF  28
03C2:  GOTO   273
03C3:  MOVF   79,W
03C4:  MOVWF  26
03C5:  MOVF   78,W
03C6:  MOVWF  25
....................       move_servo(grados_deseados); 
03C7:  MOVF   26,W
03C8:  MOVWF  28
03C9:  MOVF   25,W
03CA:  MOVWF  27
03CB:  GOTO   35A
03CC:  GOTO   3B7
....................    } // while 
.................... } 
03CD:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
