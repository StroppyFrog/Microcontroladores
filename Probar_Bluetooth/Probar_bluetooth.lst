CCS PCM C Compiler, Version 5.015, 5967               14-nov.-23 13:39

               Filename:   C:\Users\strop\OneDrive\Documentos\GitHub\Microcontroladores\Probar_Bluetooth\Probar_bluetooth.lst

               ROM used:   324 words (4%)
                           Largest free fragment is 2048
               RAM used:   21 (6%) at main() level
                           29 (8%) worst case
               Stack used: 3 locations (2 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   108
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   05C
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0051:  BCF    0A.0
0052:  BCF    0A.1
0053:  BCF    0A.2
0054:  ADDWF  02,F
0055:  RETLW  28
0056:  RETLW  0C
0057:  RETLW  01
0058:  RETLW  06
0059:  DATA 20,10
005A:  DATA 20,10
005B:  DATA 20,00
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20Mhz) 
*
006F:  MOVLW  30
0070:  MOVWF  04
0071:  BCF    03.7
0072:  MOVF   00,W
0073:  BTFSC  03.2
0074:  GOTO   082
0075:  MOVLW  06
0076:  MOVWF  78
0077:  CLRF   77
0078:  DECFSZ 77,F
0079:  GOTO   078
007A:  DECFSZ 78,F
007B:  GOTO   077
007C:  MOVLW  7B
007D:  MOVWF  77
007E:  DECFSZ 77,F
007F:  GOTO   07E
0080:  DECFSZ 00,F
0081:  GOTO   075
0082:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP 
....................  
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7) 
....................  
.................... #include <lcd_d.c> //Incluir librería LCD 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... #define LCD_DATA_PORT      0x08     //portd    LA PUSE YO  
....................  
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00C5:  MOVLW  0F
00C6:  BSF    03.5
00C7:  ANDWF  08,W
00C8:  IORLW  F0
00C9:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00CA:  BCF    03.5
00CB:  BSF    08.2
....................    delay_cycles(1); 
00CC:  NOP
....................    lcd_output_enable(1); 
00CD:  BSF    08.0
....................    delay_cycles(1); 
00CE:  NOP
....................    high = lcd_read_nibble(); 
00CF:  CALL   094
00D0:  MOVF   78,W
00D1:  MOVWF  34
....................        
....................    lcd_output_enable(0); 
00D2:  BCF    08.0
....................    delay_cycles(1); 
00D3:  NOP
....................    lcd_output_enable(1); 
00D4:  BSF    08.0
....................    delay_us(1); 
00D5:  GOTO   0D6
00D6:  GOTO   0D7
00D7:  NOP
....................    low = lcd_read_nibble(); 
00D8:  CALL   094
00D9:  MOVF   78,W
00DA:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
00DB:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00DC:  MOVLW  0F
00DD:  BSF    03.5
00DE:  ANDWF  08,W
00DF:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00E0:  BCF    03.5
00E1:  SWAPF  34,W
00E2:  MOVWF  77
00E3:  MOVLW  F0
00E4:  ANDWF  77,F
00E5:  MOVF   77,W
00E6:  IORWF  33,W
00E7:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0094:  MOVF   08,W
0095:  MOVWF  77
0096:  SWAPF  08,W
0097:  ANDLW  0F
0098:  MOVWF  78
....................   #endif 
0099:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0083:  SWAPF  34,W
0084:  ANDLW  F0
0085:  MOVWF  77
0086:  MOVLW  0F
0087:  ANDWF  08,W
0088:  IORWF  77,W
0089:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
008A:  NOP
....................    lcd_output_enable(1); 
008B:  BSF    08.0
....................    delay_us(2); 
008C:  MOVLW  02
008D:  MOVWF  77
008E:  DECFSZ 77,F
008F:  GOTO   08E
0090:  GOTO   091
0091:  NOP
....................    lcd_output_enable(0); 
0092:  BCF    08.0
0093:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
00C4:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00E8:  MOVF   78,W
00E9:  MOVWF  33
00EA:  BTFSC  33.7
00EB:  GOTO   0C5
....................    lcd_output_rs(address); 
00EC:  BTFSS  31.0
00ED:  BCF    08.1
00EE:  BTFSC  31.0
00EF:  BSF    08.1
....................    delay_cycles(1); 
00F0:  NOP
....................    lcd_output_rw(0); 
00F1:  BCF    08.2
....................    delay_cycles(1); 
00F2:  NOP
....................    lcd_output_enable(0); 
00F3:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00F4:  SWAPF  32,W
00F5:  MOVWF  33
00F6:  MOVLW  0F
00F7:  ANDWF  33,F
00F8:  MOVF   33,W
00F9:  MOVWF  34
00FA:  CALL   083
....................    lcd_send_nibble(n & 0xf); 
00FB:  MOVF   32,W
00FC:  ANDLW  0F
00FD:  MOVWF  33
00FE:  MOVWF  34
00FF:  CALL   083
.................... } 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
009A:  MOVLW  0F
009B:  BSF    03.5
009C:  ANDWF  08,W
009D:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
009E:  BCF    08.0
....................    lcd_rs_tris(); 
009F:  BCF    08.1
....................    lcd_rw_tris(); 
00A0:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00A1:  BCF    03.5
00A2:  BCF    08.1
....................    lcd_output_rw(0); 
00A3:  BCF    08.2
....................    lcd_output_enable(0); 
00A4:  BCF    08.0
....................      
....................    delay_ms(15); 
00A5:  MOVLW  0F
00A6:  MOVWF  30
00A7:  CALL   06F
....................    for(i=1;i<=3;++i) 
00A8:  MOVLW  01
00A9:  MOVWF  2F
00AA:  MOVF   2F,W
00AB:  SUBLW  03
00AC:  BTFSS  03.0
00AD:  GOTO   0B6
....................    { 
....................        lcd_send_nibble(3); 
00AE:  MOVLW  03
00AF:  MOVWF  34
00B0:  CALL   083
....................        delay_ms(5); 
00B1:  MOVLW  05
00B2:  MOVWF  30
00B3:  CALL   06F
00B4:  INCF   2F,F
00B5:  GOTO   0AA
....................    } 
....................      
....................    lcd_send_nibble(2); 
00B6:  MOVLW  02
00B7:  MOVWF  34
00B8:  CALL   083
....................    for(i=0;i<=3;++i) 
00B9:  CLRF   2F
00BA:  MOVF   2F,W
00BB:  SUBLW  03
00BC:  BTFSS  03.0
00BD:  GOTO   102
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00BE:  MOVF   2F,W
00BF:  CALL   051
00C0:  MOVWF  30
00C1:  CLRF   31
00C2:  MOVF   30,W
00C3:  MOVWF  32
*
0100:  INCF   2F,F
0101:  GOTO   0BA
0102:  BCF    0A.3
0103:  BCF    0A.4
0104:  GOTO   121 (RETURN)
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                      break; 
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................       default     : lcd_send_byte(1,c);     break; 
....................    } 
.................... } 
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #include <kbd4x4_b.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD4x4_1.C                                //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 0xF81                   // This puts the entire structure 
.................... #else 
....................    #byte kbd = 0xF83                   // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_kbd 
....................    #byte kbd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte kbd = 8                 // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 4) 
.................... #define COL1 (1 << 5) 
.................... #define COL2 (1 << 6) 
.................... #define COL3 (1 << 7) 
....................  
.................... #define ROW0 (1 << 0) 
.................... #define ROW1 (1 << 1) 
.................... #define ROW2 (1 << 2) 
.................... #define ROW3 (1 << 3) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'7','8','9','/'}, 
....................                          {'4','5','6','*'}, 
....................                          {'1','2','3','-'}, 
....................                          {'C','0','=','+'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
0105:  BCF    0A.3
0106:  BCF    0A.4
0107:  GOTO   122 (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
011B:  BCF    03.5
011C:  CLRF   2B
....................    static int1 kbd_down; 
011D:  BCF    2C.0
....................    static char last_key; 
011E:  CLRF   2D
....................    static BYTE col; 
011F:  CLRF   2E
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
....................        switch (col) { 
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
....................                     kbd=~COL0&ALL_PINS; 
....................                     break; 
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
....................                     kbd=~COL1&ALL_PINS; 
....................                     break; 
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
....................                     kbd=~COL2&ALL_PINS; 
....................                     break; 
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
....................                     kbd=~COL3&ALL_PINS; 
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
....................            kbd_down=FALSE; 
....................            kchar=last_key; 
....................            last_key='\0'; 
....................          } 
....................        } else { 
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
....................              if((kbd & ROW0)==0) 
....................                row=0; 
....................              else if((kbd & ROW1)==0) 
....................                row=1; 
....................              else if((kbd & ROW2)==0) 
....................                row=2; 
....................              else if((kbd & ROW3)==0) 
....................                row=3; 
....................              last_key =KEYS[row][col]; 
....................              kbd_down = TRUE; 
....................           } else { 
....................              ++col; 
....................              if(col==4) 
....................                col=0; 
....................           } 
....................        } 
....................       kbd_call_count=0; 
....................    } 
....................   set_tris_kbd(ALL_PINS); 
....................   return(kchar); 
.................... } 
....................  
.................... #include <getNum16.c> 
.................... /* 
....................    ** Se requiere haber inicializado el lcd y el teclado **  
....................     
....................    Usar como "int16 numero = get_num();" no puede borrar numeros 
....................     
....................    Al usar como "int16 numero = get_num_lcd(cursor_x,cursor_y)" 
....................    se pueden borrar caracteres con '-' y con 'C' 
....................        
....................    Por Angel Primitivo Vejar Cortés 2022 | angel-primi@hotmail.com 
.................... */ 
....................  
.................... unsigned int32 pow(int8 base, int8 power){ 
....................    int32 result = 1; 
....................    for(int8 i = 0; i < power; i++){ 
....................       result *= base; 
....................    } 
....................    return result; 
.................... } 
....................  
.................... char read_key(){ 
....................    char c; 
....................    do{ 
....................       c=kbd_getc(); 
....................    } 
....................    while(c=='\0');  
....................    return(c); 
.................... } 
....................  
.................... int16 get_num_lcd(int8 x, int8 y){ 
....................    lcd_gotoxy(x,y); 
....................    int16 numero = 0; 
....................    char cadena[5] = {0,0,0,0,0}; 
....................    int8 index = 0; 
....................    char tecla; 
....................    do { 
....................       tecla = read_key(); 
....................       if((tecla >= 48) && (tecla <= 57))  
....................       { 
....................          cadena[index] = tecla; 
....................          index++; 
....................          printf(lcd_putc,"%c",tecla); 
....................       } 
....................        
....................       if(tecla == '-' && index > 0){ 
....................          index--; 
....................          cadena[index] = 0; 
....................          lcd_gotoxy(x + index,y); 
....................          printf(lcd_putc," "); 
....................          lcd_gotoxy(x + index,y); 
....................       } 
....................        
....................       if(tecla == 'C' && index > 0){ 
....................          index=0; 
....................          cadena[0] = 0; 
....................          cadena[1] = 0; 
....................          cadena[2] = 0; 
....................          cadena[3] = 0; 
....................          cadena[4] = 0; 
....................          lcd_gotoxy(x,y); 
....................          printf(lcd_putc,"     "); 
....................          lcd_gotoxy(x,y); 
....................       } 
....................        
....................       if(tecla == '=' && index > 0){ 
....................          break;      
....................       } 
....................    }while(index < 5); 
....................     
....................    for(int8 i = 0; i < index; i++){ 
....................       numero += (cadena[i] - 48) * (pow(10,index - 1 - i)); 
....................    }   
....................    return numero; 
.................... } 
....................  
.................... int16 get_num() { 
....................    int16 numero = 0; 
....................    char cadena[5] = {0,0,0,0,0}; 
....................    int8 index = 0; 
....................    char tecla; 
....................    do { 
....................       tecla = read_key(); 
....................       if((tecla >= 48) && (tecla <= 57))  
....................       { 
....................          cadena[index] = tecla; 
....................          index++; 
....................          printf(lcd_putc,"%c",tecla); 
....................       } 
....................        
....................       if(tecla == '=' && index > 0){ 
....................          break;      
....................       } 
....................    }while(index < 5); 
....................     
....................    for(int8 i = 0; i < index; i++){ 
....................       numero += (cadena[i] - 48) * (pow(10,index - 1 - i)); 
....................    }   
....................    return numero; 
.................... } 
....................  
....................  
.................... #INT_RDA 
.................... void interrupcion_rda(){ 
*
005C:  BTFSS  0C.5
005D:  GOTO   05C
005E:  MOVF   1A,W
005F:  MOVWF  36
....................    char caracter = getc(); 
....................    putc(caracter); 
0060:  MOVF   36,W
0061:  BTFSS  0C.4
0062:  GOTO   061
0063:  MOVWF  19
....................    putc(caracter+1); 
0064:  MOVLW  01
0065:  ADDWF  36,W
0066:  MOVWF  37
0067:  MOVF   37,W
0068:  BTFSS  0C.4
0069:  GOTO   068
006A:  MOVWF  19
006B:  BCF    0C.5
006C:  BCF    0A.3
006D:  BCF    0A.4
006E:  GOTO   02D
.................... } 
....................  
.................... void main(){ 
*
0108:  MOVF   03,W
0109:  ANDLW  1F
010A:  MOVWF  03
010B:  MOVLW  81
010C:  BSF    03.5
010D:  MOVWF  19
010E:  MOVLW  A6
010F:  MOVWF  18
0110:  MOVLW  90
0111:  BCF    03.5
0112:  MOVWF  18
0113:  BSF    03.5
0114:  BSF    1F.0
0115:  BSF    1F.1
0116:  BSF    1F.2
0117:  BCF    1F.3
0118:  MOVLW  07
0119:  MOVWF  1C
011A:  BCF    03.7
....................    lcd_init(); //Inicializar pantalla 
*
0120:  GOTO   09A
....................    kbd_init(); 
0121:  GOTO   105
....................     
....................    setup_uart(9600); 
0122:  MOVLW  81
0123:  BSF    03.5
0124:  MOVWF  19
0125:  MOVLW  A6
0126:  MOVWF  18
0127:  MOVLW  90
0128:  BCF    03.5
0129:  MOVWF  18
....................     
....................    enable_interrupts(INT_RDA); 
012A:  BSF    03.5
012B:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
012C:  MOVLW  C0
012D:  BCF    03.5
012E:  IORWF  0B,F
....................     
....................    while(1){ 
....................       putc(':'); 
012F:  MOVLW  3A
0130:  BTFSS  0C.4
0131:  GOTO   130
0132:  MOVWF  19
....................       putc(')'); 
0133:  MOVLW  29
0134:  BTFSS  0C.4
0135:  GOTO   134
0136:  MOVWF  19
....................       putc('\n'); 
0137:  MOVLW  0A
0138:  BTFSS  0C.4
0139:  GOTO   138
013A:  MOVWF  19
....................       delay_ms(1000); 
013B:  MOVLW  04
013C:  MOVWF  2F
013D:  MOVLW  FA
013E:  MOVWF  30
013F:  CALL   06F
0140:  DECFSZ 2F,F
0141:  GOTO   13D
0142:  GOTO   12F
....................    } // while 
.................... } 
0143:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
