CCS PCM C Compiler, Version 5.112, 29001               22-may.-23 23:01

               Filename:   C:\Users\strop\OneDrive\Documentos\GitHub\Microcontroladores\Examen_U4_R\Examen_U4_R.lst

               ROM used:   680 words (8%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           41 (11%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   250
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   059
.................... // Receptor
.................... #include <16F877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0051:  BCF    0A.0
0052:  BCF    0A.1
0053:  BCF    0A.2
0054:  ADDWF  02,F
0055:  RETLW  28
0056:  RETLW  0C
0057:  RETLW  01
0058:  RETLW  06
*
0062:  DATA 8C,24
0063:  DATA CE,24
0064:  DATA C3,24
0065:  DATA 41,27
0066:  DATA C4,27
0067:  DATA 2E,17
0068:  DATA 2E,00
0069:  DATA 8C,20
006A:  DATA C4,21
006B:  DATA 31,1D
006C:  DATA A0,12
006D:  DATA EC,3A
006E:  DATA 8A,20
006F:  DATA C4,21
0070:  DATA 32,1D
0071:  DATA 00,00
*
013C:  MOVF   0B,W
013D:  MOVWF  31
013E:  BCF    0B.7
013F:  BSF    03.5
0140:  BSF    03.6
0141:  BSF    0C.7
0142:  BSF    0C.0
0143:  NOP
0144:  NOP
0145:  BCF    03.5
0146:  BCF    03.6
0147:  BTFSC  31.7
0148:  BSF    0B.7
0149:  BSF    03.6
014A:  MOVF   0C,W
014B:  ANDLW  7F
014C:  BTFSC  03.2
014D:  GOTO   190
014E:  BCF    03.6
014F:  MOVWF  31
0150:  BSF    03.6
0151:  MOVF   0D,W
0152:  BCF    03.6
0153:  MOVWF  32
0154:  BSF    03.6
0155:  MOVF   0F,W
0156:  BCF    03.6
0157:  MOVWF  33
0158:  MOVF   31,W
0159:  MOVWF  3A
015A:  CALL   108
015B:  MOVF   32,W
015C:  BSF    03.6
015D:  MOVWF  0D
015E:  BCF    03.6
015F:  MOVF   33,W
0160:  BSF    03.6
0161:  MOVWF  0F
0162:  BCF    03.6
0163:  MOVF   0B,W
0164:  MOVWF  34
0165:  BCF    0B.7
0166:  BSF    03.5
0167:  BSF    03.6
0168:  BSF    0C.7
0169:  BSF    0C.0
016A:  NOP
016B:  NOP
016C:  BCF    03.5
016D:  BCF    03.6
016E:  BTFSC  34.7
016F:  BSF    0B.7
0170:  BSF    03.6
0171:  RLF    0C,W
0172:  RLF    0E,W
0173:  ANDLW  7F
0174:  BTFSC  03.2
0175:  GOTO   190
0176:  BCF    03.6
0177:  MOVWF  31
0178:  BSF    03.6
0179:  MOVF   0D,W
017A:  BCF    03.6
017B:  MOVWF  32
017C:  BSF    03.6
017D:  MOVF   0F,W
017E:  BCF    03.6
017F:  MOVWF  33
0180:  MOVF   31,W
0181:  MOVWF  3A
0182:  CALL   108
0183:  MOVF   32,W
0184:  BSF    03.6
0185:  MOVWF  0D
0186:  BCF    03.6
0187:  MOVF   33,W
0188:  BSF    03.6
0189:  MOVWF  0F
018A:  INCF   0D,F
018B:  BTFSC  03.2
018C:  INCF   0F,F
018D:  BCF    03.6
018E:  GOTO   13C
018F:  BSF    03.6
0190:  BCF    03.6
0191:  BCF    0A.3
0192:  BCF    0A.4
0193:  GOTO   27F (RETURN)
0194:  MOVF   0B,W
0195:  MOVWF  32
0196:  BCF    0B.7
0197:  BSF    03.5
0198:  BSF    03.6
0199:  BSF    0C.7
019A:  BSF    0C.0
019B:  NOP
019C:  NOP
019D:  BCF    03.5
019E:  BCF    03.6
019F:  BTFSC  32.7
01A0:  BSF    0B.7
01A1:  BTFSC  03.0
01A2:  GOTO   1CB
01A3:  BSF    03.6
01A4:  MOVF   0C,W
01A5:  ANDLW  7F
01A6:  BCF    03.6
01A7:  MOVWF  32
01A8:  BSF    03.6
01A9:  MOVF   0D,W
01AA:  BCF    03.6
01AB:  MOVWF  33
01AC:  BSF    03.6
01AD:  MOVF   0F,W
01AE:  BCF    03.6
01AF:  MOVWF  34
01B0:  MOVF   32,W
01B1:  MOVWF  3A
01B2:  CALL   108
01B3:  MOVF   33,W
01B4:  BSF    03.6
01B5:  MOVWF  0D
01B6:  BCF    03.6
01B7:  MOVF   34,W
01B8:  BSF    03.6
01B9:  MOVWF  0F
01BA:  BCF    03.6
01BB:  MOVF   0B,W
01BC:  MOVWF  35
01BD:  BCF    0B.7
01BE:  BSF    03.5
01BF:  BSF    03.6
01C0:  BSF    0C.7
01C1:  BSF    0C.0
01C2:  NOP
01C3:  NOP
01C4:  BCF    03.5
01C5:  BCF    03.6
01C6:  BTFSC  35.7
01C7:  BSF    0B.7
01C8:  DECFSZ 31,F
01C9:  GOTO   1CB
01CA:  GOTO   1EA
01CB:  BSF    03.6
01CC:  RLF    0C,W
01CD:  RLF    0E,W
01CE:  ANDLW  7F
01CF:  BCF    03.6
01D0:  MOVWF  32
01D1:  BSF    03.6
01D2:  MOVF   0D,W
01D3:  BCF    03.6
01D4:  MOVWF  33
01D5:  BSF    03.6
01D6:  MOVF   0F,W
01D7:  BCF    03.6
01D8:  MOVWF  34
01D9:  MOVF   32,W
01DA:  MOVWF  3A
01DB:  CALL   108
01DC:  MOVF   33,W
01DD:  BSF    03.6
01DE:  MOVWF  0D
01DF:  BCF    03.6
01E0:  MOVF   34,W
01E1:  BSF    03.6
01E2:  MOVWF  0F
01E3:  INCF   0D,F
01E4:  BTFSC  03.2
01E5:  INCF   0F,F
01E6:  BCF    03.0
01E7:  BCF    03.6
01E8:  DECFSZ 31,F
01E9:  GOTO   194
01EA:  RETURN
01EB:  CLRF   39
01EC:  MOVF   04,W
01ED:  MOVWF  38
01EE:  BCF    39.0
01EF:  BTFSC  03.7
01F0:  BSF    39.0
01F1:  SWAPF  32,W
01F2:  IORLW  F0
01F3:  MOVWF  34
01F4:  ADDWF  34,F
01F5:  ADDLW  E2
01F6:  MOVWF  35
01F7:  ADDLW  32
01F8:  MOVWF  37
01F9:  MOVF   32,W
01FA:  ANDLW  0F
01FB:  ADDWF  35,F
01FC:  ADDWF  35,F
01FD:  ADDWF  37,F
01FE:  ADDLW  E9
01FF:  MOVWF  36
0200:  ADDWF  36,F
0201:  ADDWF  36,F
0202:  SWAPF  31,W
0203:  ANDLW  0F
0204:  ADDWF  36,F
0205:  ADDWF  37,F
0206:  RLF    36,F
0207:  RLF    37,F
0208:  COMF   37,F
0209:  RLF    37,F
020A:  MOVF   31,W
020B:  ANDLW  0F
020C:  ADDWF  37,F
020D:  RLF    34,F
020E:  MOVLW  07
020F:  MOVWF  33
0210:  MOVLW  0A
0211:  ADDWF  37,F
0212:  DECF   36,F
0213:  BTFSS  03.0
0214:  GOTO   211
0215:  ADDWF  36,F
0216:  DECF   35,F
0217:  BTFSS  03.0
0218:  GOTO   215
0219:  ADDWF  35,F
021A:  DECF   34,F
021B:  BTFSS  03.0
021C:  GOTO   219
021D:  ADDWF  34,F
021E:  DECF   33,F
021F:  BTFSS  03.0
0220:  GOTO   21D
0221:  MOVLW  33
0222:  MOVWF  04
0223:  BCF    03.7
0224:  MOVLW  07
0225:  ANDWF  38,W
0226:  BCF    38.6
0227:  ADDWF  04,F
0228:  MOVLW  37
0229:  SUBWF  04,W
022A:  BTFSC  03.2
022B:  BSF    38.6
022C:  MOVF   00,W
022D:  MOVWF  77
022E:  BTFSS  03.2
022F:  GOTO   238
0230:  BTFSC  38.6
0231:  GOTO   238
0232:  BTFSC  38.4
0233:  GOTO   24A
0234:  BTFSC  38.3
0235:  GOTO   238
0236:  MOVLW  20
0237:  GOTO   23B
0238:  BSF    38.3
0239:  BCF    38.4
023A:  MOVLW  30
023B:  ADDWF  77,F
023C:  CLRF   32
023D:  MOVF   04,W
023E:  MOVWF  31
023F:  BCF    32.0
0240:  BTFSC  03.7
0241:  BSF    32.0
0242:  MOVF   77,W
0243:  MOVWF  3A
0244:  CALL   108
0245:  MOVF   31,W
0246:  MOVWF  04
0247:  BCF    03.7
0248:  BTFSC  32.0
0249:  BSF    03.7
024A:  INCF   04,F
024B:  BTFSS  38.6
024C:  GOTO   228
024D:  BCF    0A.3
024E:  BCF    0A.4
024F:  GOTO   29C (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20Mhz)
*
0072:  MOVLW  3B
0073:  MOVWF  04
0074:  BCF    03.7
0075:  MOVF   00,W
0076:  BTFSC  03.2
0077:  GOTO   085
0078:  MOVLW  06
0079:  MOVWF  78
007A:  CLRF   77
007B:  DECFSZ 77,F
007C:  GOTO   07B
007D:  DECFSZ 78,F
007E:  GOTO   07A
007F:  MOVLW  7B
0080:  MOVWF  77
0081:  DECFSZ 77,F
0082:  GOTO   081
0083:  DECFSZ 00,F
0084:  GOTO   078
0085:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP
.................... // Directiva para usar el puerto USART
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7)
.................... #include <lcd_d.c> //Incluir librería LCD
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                     The following have special meaning:               ////
.................... ////                      \f  Clear display                                ////
.................... ////                      \n  Go to start of second line                   ////
.................... ////                      \b  Move back one position                       ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... // define the pinout.
.................... #define LCD_DATA_PORT      0x08     //portd    LA PUSE YO 
.................... 
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    BOOLEAN enable;           // on to an I/O port to gain
....................    BOOLEAN rs;               // access to the LCD pins.
....................    BOOLEAN rw;               // The bits are allocated from
....................    BOOLEAN unused;           // low order up.  ENABLE will
....................    int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
.................... 
.................... BYTE lcd_read_nibble(void);
.................... 
.................... BYTE lcd_read_byte(void)
.................... {
....................    BYTE low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
009C:  MOVLW  0F
009D:  BSF    03.5
009E:  ANDWF  08,W
009F:  IORLW  F0
00A0:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00A1:  BCF    03.5
00A2:  BSF    08.2
....................    delay_cycles(1);
00A3:  NOP
....................    lcd_output_enable(1);
00A4:  BSF    08.0
....................    delay_cycles(1);
00A5:  NOP
....................    high = lcd_read_nibble();
00A6:  CALL   095
00A7:  MOVF   78,W
00A8:  MOVWF  42
....................       
....................    lcd_output_enable(0);
00A9:  BCF    08.0
....................    delay_cycles(1);
00AA:  NOP
....................    lcd_output_enable(1);
00AB:  BSF    08.0
....................    delay_us(1);
00AC:  GOTO   0AD
00AD:  GOTO   0AE
00AE:  NOP
....................    low = lcd_read_nibble();
00AF:  CALL   095
00B0:  MOVF   78,W
00B1:  MOVWF  41
....................       
....................    lcd_output_enable(0);
00B2:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00B3:  MOVLW  0F
00B4:  BSF    03.5
00B5:  ANDWF  08,W
00B6:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00B7:  BCF    03.5
00B8:  SWAPF  42,W
00B9:  MOVWF  77
00BA:  MOVLW  F0
00BB:  ANDWF  77,F
00BC:  MOVF   77,W
00BD:  IORWF  41,W
00BE:  MOVWF  78
.................... }
.................... 
.................... BYTE lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    BYTE n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0095:  MOVF   08,W
0096:  MOVWF  77
0097:  SWAPF  08,W
0098:  ANDLW  0F
0099:  MOVWF  78
....................   #endif
009A:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(BYTE n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0086:  SWAPF  42,W
0087:  ANDLW  F0
0088:  MOVWF  77
0089:  MOVLW  0F
008A:  ANDWF  08,W
008B:  IORWF  77,W
008C:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
008D:  NOP
....................    lcd_output_enable(1);
008E:  BSF    08.0
....................    delay_us(2);
008F:  MOVLW  03
0090:  MOVWF  77
0091:  DECFSZ 77,F
0092:  GOTO   091
....................    lcd_output_enable(0);
0093:  BCF    08.0
0094:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(BYTE address, BYTE n)
.................... {
....................    lcd_output_rs(0);
*
009B:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00BF:  MOVF   78,W
00C0:  MOVWF  41
00C1:  BTFSC  41.7
00C2:  GOTO   09C
....................    lcd_output_rs(address);
00C3:  BTFSS  3F.0
00C4:  BCF    08.1
00C5:  BTFSC  3F.0
00C6:  BSF    08.1
....................    delay_cycles(1);
00C7:  NOP
....................    lcd_output_rw(0);
00C8:  BCF    08.2
....................    delay_cycles(1);
00C9:  NOP
....................    lcd_output_enable(0);
00CA:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
00CB:  SWAPF  40,W
00CC:  MOVWF  41
00CD:  MOVLW  0F
00CE:  ANDWF  41,F
00CF:  MOVF   41,W
00D0:  MOVWF  42
00D1:  CALL   086
....................    lcd_send_nibble(n & 0xf);
00D2:  MOVF   40,W
00D3:  ANDLW  0F
00D4:  MOVWF  41
00D5:  MOVWF  42
00D6:  CALL   086
00D7:  RETURN
.................... }
.................... 
.................... void lcd_init(void) 
.................... {
....................    BYTE i;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00D8:  MOVLW  0F
00D9:  BSF    03.5
00DA:  ANDWF  08,W
00DB:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
00DC:  BCF    08.0
....................    lcd_rs_tris();
00DD:  BCF    08.1
....................    lcd_rw_tris();
00DE:  BCF    08.2
....................  #endif
.................... 
....................    lcd_output_rs(0);
00DF:  BCF    03.5
00E0:  BCF    08.1
....................    lcd_output_rw(0);
00E1:  BCF    08.2
....................    lcd_output_enable(0);
00E2:  BCF    08.0
....................     
....................    delay_ms(15);
00E3:  MOVLW  0F
00E4:  MOVWF  3B
00E5:  CALL   072
....................    for(i=1;i<=3;++i)
00E6:  MOVLW  01
00E7:  MOVWF  31
00E8:  MOVF   31,W
00E9:  SUBLW  03
00EA:  BTFSS  03.0
00EB:  GOTO   0F4
....................    {
....................        lcd_send_nibble(3);
00EC:  MOVLW  03
00ED:  MOVWF  42
00EE:  CALL   086
....................        delay_ms(5);
00EF:  MOVLW  05
00F0:  MOVWF  3B
00F1:  CALL   072
00F2:  INCF   31,F
00F3:  GOTO   0E8
....................    }
....................     
....................    lcd_send_nibble(2);
00F4:  MOVLW  02
00F5:  MOVWF  42
00F6:  CALL   086
....................    for(i=0;i<=3;++i)
00F7:  CLRF   31
00F8:  MOVF   31,W
00F9:  SUBLW  03
00FA:  BTFSS  03.0
00FB:  GOTO   105
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00FC:  MOVF   31,W
00FD:  CALL   051
00FE:  MOVWF  32
00FF:  CLRF   3F
0100:  MOVF   32,W
0101:  MOVWF  40
0102:  CALL   09B
0103:  INCF   31,F
0104:  GOTO   0F8
0105:  BCF    0A.3
0106:  BCF    0A.4
0107:  GOTO   26B (RETURN)
.................... }
.................... 
.................... void lcd_gotoxy(BYTE x, BYTE y)
.................... {
....................    BYTE address;
.................... 
....................    if(y!=1)
*
011F:  DECFSZ 3C,W
0120:  GOTO   122
0121:  GOTO   125
....................       address=LCD_LINE_TWO;
0122:  MOVLW  40
0123:  MOVWF  3D
0124:  GOTO   126
....................    else
....................       address=0;
0125:  CLRF   3D
....................      
....................    address+=x-1;
0126:  MOVLW  01
0127:  SUBWF  3B,W
0128:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address);
0129:  MOVF   3D,W
012A:  IORLW  80
012B:  MOVWF  3E
012C:  CLRF   3F
012D:  MOVF   3E,W
012E:  MOVWF  40
012F:  CALL   09B
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
*
0108:  MOVF   3A,W
0109:  XORLW  0C
010A:  BTFSC  03.2
010B:  GOTO   113
010C:  XORLW  06
010D:  BTFSC  03.2
010E:  GOTO   11B
010F:  XORLW  02
0110:  BTFSC  03.2
0111:  GOTO   131
0112:  GOTO   136
....................    {
....................       case '\f'   :  lcd_send_byte(0,1);
0113:  CLRF   3F
0114:  MOVLW  01
0115:  MOVWF  40
0116:  CALL   09B
....................                      delay_ms(2);
0117:  MOVLW  02
0118:  MOVWF  3B
0119:  CALL   072
....................                      break;
011A:  GOTO   13B
....................                      
....................       case '\n'   : lcd_gotoxy(1,2);        break;
011B:  MOVLW  01
011C:  MOVWF  3B
011D:  MOVLW  02
011E:  MOVWF  3C
*
0130:  GOTO   13B
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0131:  CLRF   3F
0132:  MOVLW  10
0133:  MOVWF  40
0134:  CALL   09B
0135:  GOTO   13B
....................      
....................       default     : lcd_send_byte(1,c);     break;
0136:  MOVLW  01
0137:  MOVWF  3F
0138:  MOVF   3A,W
0139:  MOVWF  40
013A:  CALL   09B
....................    }
013B:  RETURN
.................... }
....................  
.................... char lcd_getc(BYTE x, BYTE y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... 
.................... int16 NEWPOT1 = 0, OLDPOT1 = 0;
.................... //int16 POT2;
.................... //short Ent = 0;
.................... 
.................... // Interrupción al recibir una trama
.................... #INT_RDA 
.................... void rda_int()
.................... {
....................    OLDPOT1 = getc();
*
0059:  BTFSS  0C.5
005A:  GOTO   059
005B:  MOVF   1A,W
005C:  CLRF   2E
005D:  MOVWF  2D
....................    //POT2 = getc();
005E:  BCF    0C.5
005F:  BCF    0A.3
0060:  BCF    0A.4
0061:  GOTO   02D
.................... }
.................... 
.................... void main()
*
0250:  MOVF   03,W
0251:  ANDLW  1F
0252:  MOVWF  03
0253:  MOVLW  81
0254:  BSF    03.5
0255:  MOVWF  19
0256:  MOVLW  A6
0257:  MOVWF  18
0258:  MOVLW  90
0259:  BCF    03.5
025A:  MOVWF  18
025B:  CLRF   2C
025C:  CLRF   2B
025D:  CLRF   2E
025E:  CLRF   2D
025F:  CLRF   30
0260:  CLRF   2F
0261:  BSF    03.5
0262:  BSF    1F.0
0263:  BSF    1F.1
0264:  BSF    1F.2
0265:  BCF    1F.3
0266:  MOVLW  07
0267:  MOVWF  1C
0268:  BCF    03.7
.................... {
....................    lcd_init(); //Inicializar pantalla  
0269:  BCF    03.5
026A:  GOTO   0D8
....................    setup_uart(9600); //Configurar baudios
026B:  MOVLW  81
026C:  BSF    03.5
026D:  MOVWF  19
026E:  MOVLW  A6
026F:  MOVWF  18
0270:  MOVLW  90
0271:  BCF    03.5
0272:  MOVWF  18
....................    // Habilitar interrupciones
....................    enable_interrupts(INT_RDA);
0273:  BSF    03.5
0274:  BSF    0C.5
....................    enable_interrupts(GLOBAL);
0275:  MOVLW  C0
0276:  BCF    03.5
0277:  IORWF  0B,F
....................    printf(lcd_putc,"\fINICIANDO...");
0278:  MOVLW  62
0279:  BSF    03.6
027A:  MOVWF  0D
027B:  MOVLW  00
027C:  MOVWF  0F
027D:  BCF    03.6
027E:  GOTO   13C
....................    while(TRUE)
....................    {
....................       if(OLDPOT1 != NEWPOT1)
027F:  MOVF   2B,W
0280:  SUBWF  2D,W
0281:  BTFSS  03.2
0282:  GOTO   287
0283:  MOVF   2C,W
0284:  SUBWF  2E,W
0285:  BTFSC  03.2
0286:  GOTO   2A6
....................       {
....................          OLDPOT1 = NEWPOT1;
0287:  MOVF   2C,W
0288:  MOVWF  2E
0289:  MOVF   2B,W
028A:  MOVWF  2D
....................          printf(lcd_putc,"\fADC1: %lu\nADC2:",NEWPOT1);
028B:  MOVLW  69
028C:  BSF    03.6
028D:  MOVWF  0D
028E:  MOVLW  00
028F:  MOVWF  0F
0290:  BCF    03.0
0291:  MOVLW  07
0292:  BCF    03.6
0293:  MOVWF  31
0294:  CALL   194
0295:  MOVLW  10
0296:  MOVWF  04
0297:  MOVF   2C,W
0298:  MOVWF  32
0299:  MOVF   2B,W
029A:  MOVWF  31
029B:  GOTO   1EB
029C:  MOVLW  6E
029D:  BSF    03.6
029E:  MOVWF  0D
029F:  MOVLW  00
02A0:  MOVWF  0F
02A1:  BCF    03.0
02A2:  MOVLW  06
02A3:  BCF    03.6
02A4:  MOVWF  31
02A5:  CALL   194
....................       }
02A6:  GOTO   27F
....................    }
.................... }
02A7:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
