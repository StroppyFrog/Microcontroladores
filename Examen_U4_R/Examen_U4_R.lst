CCS PCM C Compiler, Version 5.015, 5967               27-nov.-23 09:15

               Filename:   C:\Users\strop\OneDrive\Documentos\GitHub\Microcontroladores\Microcontroladores\Examen_U4_R\Examen_U4_R.lst

               ROM used:   700 words (9%)
                           Largest free fragment is 2048
               RAM used:   30 (8%) at main() level
                           50 (14%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   205
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   059
.................... // Receptor 
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0051:  BCF    0A.0
0052:  BCF    0A.1
0053:  BCF    0A.2
0054:  ADDWF  02,F
0055:  RETLW  28
0056:  RETLW  0C
0057:  RETLW  01
0058:  RETLW  06
*
0075:  DATA 8C,20
0076:  DATA 33,10
0077:  DATA 25,26
0078:  DATA 75,10
0079:  DATA 25,26
007A:  DATA 75,00
*
0149:  CLRF   40
014A:  MOVF   04,W
014B:  MOVWF  3F
014C:  BCF    40.0
014D:  BTFSC  03.7
014E:  BSF    40.0
014F:  SWAPF  39,W
0150:  IORLW  F0
0151:  MOVWF  3B
0152:  ADDWF  3B,F
0153:  ADDLW  E2
0154:  MOVWF  3C
0155:  ADDLW  32
0156:  MOVWF  3E
0157:  MOVF   39,W
0158:  ANDLW  0F
0159:  ADDWF  3C,F
015A:  ADDWF  3C,F
015B:  ADDWF  3E,F
015C:  ADDLW  E9
015D:  MOVWF  3D
015E:  ADDWF  3D,F
015F:  ADDWF  3D,F
0160:  SWAPF  38,W
0161:  ANDLW  0F
0162:  ADDWF  3D,F
0163:  ADDWF  3E,F
0164:  RLF    3D,F
0165:  RLF    3E,F
0166:  COMF   3E,F
0167:  RLF    3E,F
0168:  MOVF   38,W
0169:  ANDLW  0F
016A:  ADDWF  3E,F
016B:  RLF    3B,F
016C:  MOVLW  07
016D:  MOVWF  3A
016E:  MOVLW  0A
016F:  ADDWF  3E,F
0170:  DECF   3D,F
0171:  BTFSS  03.0
0172:  GOTO   16F
0173:  ADDWF  3D,F
0174:  DECF   3C,F
0175:  BTFSS  03.0
0176:  GOTO   173
0177:  ADDWF  3C,F
0178:  DECF   3B,F
0179:  BTFSS  03.0
017A:  GOTO   177
017B:  ADDWF  3B,F
017C:  DECF   3A,F
017D:  BTFSS  03.0
017E:  GOTO   17B
017F:  MOVLW  3A
0180:  MOVWF  04
0181:  BCF    03.7
0182:  MOVLW  07
0183:  ANDWF  3F,W
0184:  BCF    3F.6
0185:  ADDWF  04,F
0186:  MOVLW  3E
0187:  SUBWF  04,W
0188:  BTFSC  03.2
0189:  BSF    3F.6
018A:  MOVF   00,W
018B:  MOVWF  77
018C:  BTFSS  03.2
018D:  GOTO   196
018E:  BTFSC  3F.6
018F:  GOTO   196
0190:  BTFSC  3F.4
0191:  GOTO   1A8
0192:  BTFSC  3F.3
0193:  GOTO   196
0194:  MOVLW  20
0195:  GOTO   199
0196:  BSF    3F.3
0197:  BCF    3F.4
0198:  MOVLW  30
0199:  ADDWF  77,F
019A:  CLRF   39
019B:  MOVF   04,W
019C:  MOVWF  38
019D:  BCF    39.0
019E:  BTFSC  03.7
019F:  BSF    39.0
01A0:  MOVF   77,W
01A1:  MOVWF  41
01A2:  CALL   125
01A3:  MOVF   38,W
01A4:  MOVWF  04
01A5:  BCF    03.7
01A6:  BTFSC  39.0
01A7:  BSF    03.7
01A8:  INCF   04,F
01A9:  BTFSS  3F.6
01AA:  GOTO   186
01AB:  RETURN
01AC:  MOVF   0B,W
01AD:  MOVWF  39
01AE:  BCF    0B.7
01AF:  BSF    03.5
01B0:  BSF    03.6
01B1:  BSF    0C.7
01B2:  BSF    0C.0
01B3:  NOP
01B4:  NOP
01B5:  BCF    03.5
01B6:  BCF    03.6
01B7:  BTFSC  39.7
01B8:  BSF    0B.7
01B9:  BTFSC  03.0
01BA:  GOTO   1E3
01BB:  BSF    03.6
01BC:  MOVF   0C,W
01BD:  ANDLW  7F
01BE:  BCF    03.6
01BF:  MOVWF  39
01C0:  BSF    03.6
01C1:  MOVF   0D,W
01C2:  BCF    03.6
01C3:  MOVWF  3A
01C4:  BSF    03.6
01C5:  MOVF   0F,W
01C6:  BCF    03.6
01C7:  MOVWF  3B
01C8:  MOVF   39,W
01C9:  MOVWF  41
01CA:  CALL   125
01CB:  MOVF   3A,W
01CC:  BSF    03.6
01CD:  MOVWF  0D
01CE:  BCF    03.6
01CF:  MOVF   3B,W
01D0:  BSF    03.6
01D1:  MOVWF  0F
01D2:  BCF    03.6
01D3:  MOVF   0B,W
01D4:  MOVWF  3C
01D5:  BCF    0B.7
01D6:  BSF    03.5
01D7:  BSF    03.6
01D8:  BSF    0C.7
01D9:  BSF    0C.0
01DA:  NOP
01DB:  NOP
01DC:  BCF    03.5
01DD:  BCF    03.6
01DE:  BTFSC  3C.7
01DF:  BSF    0B.7
01E0:  DECFSZ 38,F
01E1:  GOTO   1E3
01E2:  GOTO   202
01E3:  BSF    03.6
01E4:  RLF    0C,W
01E5:  RLF    0E,W
01E6:  ANDLW  7F
01E7:  BCF    03.6
01E8:  MOVWF  39
01E9:  BSF    03.6
01EA:  MOVF   0D,W
01EB:  BCF    03.6
01EC:  MOVWF  3A
01ED:  BSF    03.6
01EE:  MOVF   0F,W
01EF:  BCF    03.6
01F0:  MOVWF  3B
01F1:  MOVF   39,W
01F2:  MOVWF  41
01F3:  CALL   125
01F4:  MOVF   3A,W
01F5:  BSF    03.6
01F6:  MOVWF  0D
01F7:  BCF    03.6
01F8:  MOVF   3B,W
01F9:  BSF    03.6
01FA:  MOVWF  0F
01FB:  INCF   0D,F
01FC:  BTFSC  03.2
01FD:  INCF   0F,F
01FE:  BCF    03.0
01FF:  BCF    03.6
0200:  DECFSZ 38,F
0201:  GOTO   1AC
0202:  BCF    0A.3
0203:  BCF    0A.4
0204:  GOTO   2A5 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20Mhz) 
*
007B:  MOVLW  42
007C:  MOVWF  04
007D:  BCF    03.7
007E:  MOVF   00,W
007F:  BTFSC  03.2
0080:  GOTO   08E
0081:  MOVLW  06
0082:  MOVWF  78
0083:  CLRF   77
0084:  DECFSZ 77,F
0085:  GOTO   084
0086:  DECFSZ 78,F
0087:  GOTO   083
0088:  MOVLW  7B
0089:  MOVWF  77
008A:  DECFSZ 77,F
008B:  GOTO   08A
008C:  DECFSZ 00,F
008D:  GOTO   081
008E:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP 
.................... // Directiva para usar el puerto USART 
.................... #use rs232(BAUD=9600, XMIT = PIN_C6, RCV=PIN_C7) 
.................... #include <lcd_d.c> //Incluir librería LCD 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... #define LCD_DATA_PORT      0x08     //portd    LA PUSE YO  
....................  
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00A7:  MOVLW  0F
00A8:  BSF    03.5
00A9:  ANDWF  08,W
00AA:  IORLW  F0
00AB:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AC:  BCF    03.5
00AD:  BSF    08.2
....................    delay_cycles(1); 
00AE:  NOP
....................    lcd_output_enable(1); 
00AF:  BSF    08.0
....................    delay_cycles(1); 
00B0:  NOP
....................    high = lcd_read_nibble(); 
00B1:  CALL   0A0
00B2:  MOVF   78,W
00B3:  MOVWF  49
....................        
....................    lcd_output_enable(0); 
00B4:  BCF    08.0
....................    delay_cycles(1); 
00B5:  NOP
....................    lcd_output_enable(1); 
00B6:  BSF    08.0
....................    delay_us(1); 
00B7:  GOTO   0B8
00B8:  GOTO   0B9
00B9:  NOP
....................    low = lcd_read_nibble(); 
00BA:  CALL   0A0
00BB:  MOVF   78,W
00BC:  MOVWF  48
....................        
....................    lcd_output_enable(0); 
00BD:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00BE:  MOVLW  0F
00BF:  BSF    03.5
00C0:  ANDWF  08,W
00C1:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C2:  BCF    03.5
00C3:  SWAPF  49,W
00C4:  MOVWF  77
00C5:  MOVLW  F0
00C6:  ANDWF  77,F
00C7:  MOVF   77,W
00C8:  IORWF  48,W
00C9:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
00A0:  MOVF   08,W
00A1:  MOVWF  77
00A2:  SWAPF  08,W
00A3:  ANDLW  0F
00A4:  MOVWF  78
....................   #endif 
00A5:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
008F:  SWAPF  49,W
0090:  ANDLW  F0
0091:  MOVWF  77
0092:  MOVLW  0F
0093:  ANDWF  08,W
0094:  IORWF  77,W
0095:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0096:  NOP
....................    lcd_output_enable(1); 
0097:  BSF    08.0
....................    delay_us(2); 
0098:  MOVLW  02
0099:  MOVWF  77
009A:  DECFSZ 77,F
009B:  GOTO   09A
009C:  GOTO   09D
009D:  NOP
....................    lcd_output_enable(0); 
009E:  BCF    08.0
009F:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
00A6:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00CA:  MOVF   78,W
00CB:  MOVWF  48
00CC:  BTFSC  48.7
00CD:  GOTO   0A7
....................    lcd_output_rs(address); 
00CE:  BTFSS  46.0
00CF:  BCF    08.1
00D0:  BTFSC  46.0
00D1:  BSF    08.1
....................    delay_cycles(1); 
00D2:  NOP
....................    lcd_output_rw(0); 
00D3:  BCF    08.2
....................    delay_cycles(1); 
00D4:  NOP
....................    lcd_output_enable(0); 
00D5:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00D6:  SWAPF  47,W
00D7:  MOVWF  48
00D8:  MOVLW  0F
00D9:  ANDWF  48,F
00DA:  MOVF   48,W
00DB:  MOVWF  49
00DC:  CALL   08F
....................    lcd_send_nibble(n & 0xf); 
00DD:  MOVF   47,W
00DE:  ANDLW  0F
00DF:  MOVWF  48
00E0:  MOVWF  49
00E1:  CALL   08F
00E2:  RETURN
.................... } 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00E3:  MOVLW  0F
00E4:  BSF    03.5
00E5:  ANDWF  08,W
00E6:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00E7:  BCF    08.0
....................    lcd_rs_tris(); 
00E8:  BCF    08.1
....................    lcd_rw_tris(); 
00E9:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00EA:  BCF    03.5
00EB:  BCF    08.1
....................    lcd_output_rw(0); 
00EC:  BCF    08.2
....................    lcd_output_enable(0); 
00ED:  BCF    08.0
....................      
....................    delay_ms(15); 
00EE:  MOVLW  0F
00EF:  MOVWF  42
00F0:  CALL   07B
....................    for(i=1;i<=3;++i) 
00F1:  MOVLW  01
00F2:  MOVWF  38
00F3:  MOVF   38,W
00F4:  SUBLW  03
00F5:  BTFSS  03.0
00F6:  GOTO   0FF
....................    { 
....................        lcd_send_nibble(3); 
00F7:  MOVLW  03
00F8:  MOVWF  49
00F9:  CALL   08F
....................        delay_ms(5); 
00FA:  MOVLW  05
00FB:  MOVWF  42
00FC:  CALL   07B
00FD:  INCF   38,F
00FE:  GOTO   0F3
....................    } 
....................      
....................    lcd_send_nibble(2); 
00FF:  MOVLW  02
0100:  MOVWF  49
0101:  CALL   08F
....................    for(i=0;i<=3;++i) 
0102:  CLRF   38
0103:  MOVF   38,W
0104:  SUBLW  03
0105:  BTFSS  03.0
0106:  GOTO   110
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0107:  MOVF   38,W
0108:  CALL   051
0109:  MOVWF  39
010A:  CLRF   46
010B:  MOVF   39,W
010C:  MOVWF  47
010D:  CALL   0A6
010E:  INCF   38,F
010F:  GOTO   103
0110:  BCF    0A.3
0111:  BCF    0A.4
0112:  GOTO   21B (RETURN)
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
0113:  DECFSZ 43,W
0114:  GOTO   116
0115:  GOTO   119
....................       address=LCD_LINE_TWO; 
0116:  MOVLW  40
0117:  MOVWF  44
0118:  GOTO   11A
....................    else 
....................       address=0; 
0119:  CLRF   44
....................       
....................    address+=x-1; 
011A:  MOVLW  01
011B:  SUBWF  42,W
011C:  ADDWF  44,F
....................    lcd_send_byte(0,0x80|address); 
011D:  MOVF   44,W
011E:  IORLW  80
011F:  MOVWF  45
0120:  CLRF   46
0121:  MOVF   45,W
0122:  MOVWF  47
0123:  CALL   0A6
0124:  RETURN
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0125:  MOVF   41,W
0126:  XORLW  0C
0127:  BTFSC  03.2
0128:  GOTO   130
0129:  XORLW  06
012A:  BTFSC  03.2
012B:  GOTO   138
012C:  XORLW  02
012D:  BTFSC  03.2
012E:  GOTO   13E
012F:  GOTO   143
....................    { 
....................       case '\f'   :  lcd_send_byte(0,1); 
0130:  CLRF   46
0131:  MOVLW  01
0132:  MOVWF  47
0133:  CALL   0A6
....................                      delay_ms(2); 
0134:  MOVLW  02
0135:  MOVWF  42
0136:  CALL   07B
....................                      break; 
0137:  GOTO   148
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0138:  MOVLW  01
0139:  MOVWF  42
013A:  MOVLW  02
013B:  MOVWF  43
013C:  CALL   113
013D:  GOTO   148
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
013E:  CLRF   46
013F:  MOVLW  10
0140:  MOVWF  47
0141:  CALL   0A6
0142:  GOTO   148
....................       
....................       default     : lcd_send_byte(1,c);     break; 
0143:  MOVLW  01
0144:  MOVWF  46
0145:  MOVF   41,W
0146:  MOVWF  47
0147:  CALL   0A6
....................    } 
0148:  RETURN
.................... } 
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
.................... int8 byte1,byte2; 
.................... int16 num16, class, POT1, POT2, POT3; 
.................... short entrada = 0; 
....................  
.................... #INT_RDA  
.................... void rda_int() 
.................... { 
....................    class = getc(); 
*
0059:  BTFSS  0C.5
005A:  GOTO   059
005B:  MOVF   1A,W
005C:  CLRF   30
005D:  MOVWF  2F
....................    byte1 = getc(); 
005E:  BTFSS  0C.5
005F:  GOTO   05E
0060:  MOVF   1A,W
0061:  MOVWF  2B
....................    byte2 = getc(); 
0062:  BTFSS  0C.5
0063:  GOTO   062
0064:  MOVF   1A,W
0065:  MOVWF  2C
....................    num16 = ((int16) byte2 << 8) | byte1; 
0066:  CLRF   4C
0067:  MOVF   2C,W
0068:  MOVWF  4B
0069:  MOVWF  4C
006A:  CLRF   4B
006B:  MOVF   4B,W
006C:  IORWF  2B,W
006D:  MOVWF  2D
006E:  MOVF   4C,W
006F:  MOVWF  2E
....................    entrada = 1; 
0070:  BSF    37.0
0071:  BCF    0C.5
0072:  BCF    0A.3
0073:  BCF    0A.4
0074:  GOTO   02D
.................... } 
....................  
.................... void main() 
*
0205:  MOVF   03,W
0206:  ANDLW  1F
0207:  MOVWF  03
0208:  MOVLW  81
0209:  BSF    03.5
020A:  MOVWF  19
020B:  MOVLW  A6
020C:  MOVWF  18
020D:  MOVLW  90
020E:  BCF    03.5
020F:  MOVWF  18
0210:  BCF    37.0
0211:  BSF    03.5
0212:  BSF    1F.0
0213:  BSF    1F.1
0214:  BSF    1F.2
0215:  BCF    1F.3
0216:  MOVLW  07
0217:  MOVWF  1C
0218:  BCF    03.7
.................... { 
....................    lcd_init(); //Inicializar pantalla   
0219:  BCF    03.5
021A:  GOTO   0E3
....................    setup_uart(9600); //Configurar baudios 
021B:  MOVLW  81
021C:  BSF    03.5
021D:  MOVWF  19
021E:  MOVLW  A6
021F:  MOVWF  18
0220:  MOVLW  90
0221:  BCF    03.5
0222:  MOVWF  18
....................    // Habilitar interrupciones 
....................    enable_interrupts(INT_RDA); 
0223:  BSF    03.5
0224:  BSF    0C.5
....................    enable_interrupts(GLOBAL); 
0225:  MOVLW  C0
0226:  BCF    03.5
0227:  IORWF  0B,F
....................    printf(lcd_putc,"\f"); 
0228:  MOVLW  0C
0229:  MOVWF  41
022A:  CALL   125
....................    while(TRUE) 
....................    { 
....................       if(entrada == 1 && class == 1) 
022B:  BTFSS  37.0
022C:  GOTO   25E
022D:  DECFSZ 2F,W
022E:  GOTO   25E
022F:  MOVF   30,F
0230:  BTFSS  03.2
0231:  GOTO   25E
....................       { 
....................          entrada = 0;  
0232:  BCF    37.0
....................          lcd_gotoxy(1,1); 
0233:  MOVLW  01
0234:  MOVWF  42
0235:  MOVWF  43
0236:  CALL   113
....................          printf(lcd_putc,"\fA1"); 
0237:  MOVLW  0C
0238:  MOVWF  41
0239:  CALL   125
023A:  MOVLW  41
023B:  MOVWF  41
023C:  CALL   125
023D:  MOVLW  31
023E:  MOVWF  41
023F:  CALL   125
....................          lcd_gotoxy(1,2); 
0240:  MOVLW  01
0241:  MOVWF  42
0242:  MOVLW  02
0243:  MOVWF  43
0244:  CALL   113
....................          printf(lcd_putc,"\f%Lu %Lu", class, num16); 
0245:  MOVLW  0C
0246:  MOVWF  41
0247:  CALL   125
0248:  MOVLW  10
0249:  MOVWF  04
024A:  MOVF   30,W
024B:  MOVWF  39
024C:  MOVF   2F,W
024D:  MOVWF  38
024E:  CALL   149
024F:  MOVLW  20
0250:  MOVWF  41
0251:  CALL   125
0252:  MOVLW  10
0253:  MOVWF  04
0254:  MOVF   2E,W
0255:  MOVWF  39
0256:  MOVF   2D,W
0257:  MOVWF  38
0258:  CALL   149
....................          POT1 = num16; 
0259:  MOVF   2E,W
025A:  MOVWF  32
025B:  MOVF   2D,W
025C:  MOVWF  31
....................       } 
025D:  GOTO   2BA
....................       else if(entrada == 1 && class == 2) 
025E:  BTFSS  37.0
025F:  GOTO   28C
0260:  MOVF   2F,W
0261:  SUBLW  02
0262:  BTFSS  03.2
0263:  GOTO   28C
0264:  MOVF   30,F
0265:  BTFSS  03.2
0266:  GOTO   28C
....................       { 
....................          entrada = 0; 
0267:  BCF    37.0
....................          lcd_gotoxy(1,2); 
0268:  MOVLW  01
0269:  MOVWF  42
026A:  MOVLW  02
026B:  MOVWF  43
026C:  CALL   113
....................          printf(lcd_putc,"\fA2%Lu %Lu", class, num16); 
026D:  MOVLW  0C
026E:  MOVWF  41
026F:  CALL   125
0270:  MOVLW  41
0271:  MOVWF  41
0272:  CALL   125
0273:  MOVLW  32
0274:  MOVWF  41
0275:  CALL   125
0276:  MOVLW  10
0277:  MOVWF  04
0278:  MOVF   30,W
0279:  MOVWF  39
027A:  MOVF   2F,W
027B:  MOVWF  38
027C:  CALL   149
027D:  MOVLW  20
027E:  MOVWF  41
027F:  CALL   125
0280:  MOVLW  10
0281:  MOVWF  04
0282:  MOVF   2E,W
0283:  MOVWF  39
0284:  MOVF   2D,W
0285:  MOVWF  38
0286:  CALL   149
....................          POT2 = num16; 
0287:  MOVF   2E,W
0288:  MOVWF  34
0289:  MOVF   2D,W
028A:  MOVWF  33
....................       } 
028B:  GOTO   2BA
....................       else if(entrada == 1 && class == 3) 
028C:  BTFSS  37.0
028D:  GOTO   2BA
028E:  MOVF   2F,W
028F:  SUBLW  03
0290:  BTFSS  03.2
0291:  GOTO   2BA
0292:  MOVF   30,F
0293:  BTFSS  03.2
0294:  GOTO   2BA
....................       { 
....................          entrada = 0; 
0295:  BCF    37.0
....................          lcd_gotoxy(1,2); 
0296:  MOVLW  01
0297:  MOVWF  42
0298:  MOVLW  02
0299:  MOVWF  43
029A:  CALL   113
....................          printf(lcd_putc,"\fA3 %Lu %Lu", class, num16); 
029B:  MOVLW  75
029C:  BSF    03.6
029D:  MOVWF  0D
029E:  MOVLW  00
029F:  MOVWF  0F
02A0:  BCF    03.0
02A1:  MOVLW  04
02A2:  BCF    03.6
02A3:  MOVWF  38
02A4:  GOTO   1AC
02A5:  MOVLW  10
02A6:  MOVWF  04
02A7:  MOVF   30,W
02A8:  MOVWF  39
02A9:  MOVF   2F,W
02AA:  MOVWF  38
02AB:  CALL   149
02AC:  MOVLW  20
02AD:  MOVWF  41
02AE:  CALL   125
02AF:  MOVLW  10
02B0:  MOVWF  04
02B1:  MOVF   2E,W
02B2:  MOVWF  39
02B3:  MOVF   2D,W
02B4:  MOVWF  38
02B5:  CALL   149
....................          POT3 = num16; 
02B6:  MOVF   2E,W
02B7:  MOVWF  36
02B8:  MOVF   2D,W
02B9:  MOVWF  35
....................       } 
02BA:  GOTO   22B
....................    } 
.................... } 
02BB:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
