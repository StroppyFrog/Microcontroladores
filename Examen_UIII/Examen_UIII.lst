CCS PCM C Compiler, Version 5.112, 29001               03-may.-23 10:50

               Filename:   C:\Users\Ernesto VC\Documents\GitHub\Microcontroladores\Examen_UIII\Examen_UIII.lst

               ROM used:   689 words (8%)
                           Largest free fragment is 2048
               RAM used:   26 (7%) at main() level
                           47 (13%) worst case
               Stack used: 5 locations (4 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   248
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.3
0028:  GOTO   02B
0029:  BTFSC  0B.0
002A:  GOTO   050
002B:  BTFSS  0B.4
002C:  GOTO   02F
002D:  BTFSC  0B.1
002E:  GOTO   053
002F:  MOVF   22,W
0030:  MOVWF  04
0031:  MOVF   23,W
0032:  MOVWF  77
0033:  MOVF   24,W
0034:  MOVWF  78
0035:  MOVF   25,W
0036:  MOVWF  79
0037:  MOVF   26,W
0038:  MOVWF  7A
0039:  MOVF   27,W
003A:  BSF    03.6
003B:  MOVWF  0D
003C:  BCF    03.6
003D:  MOVF   28,W
003E:  BSF    03.6
003F:  MOVWF  0F
0040:  BCF    03.6
0041:  MOVF   29,W
0042:  BSF    03.6
0043:  MOVWF  0C
0044:  BCF    03.6
0045:  MOVF   2A,W
0046:  BSF    03.6
0047:  MOVWF  0E
0048:  BCF    03.6
0049:  MOVF   20,W
004A:  MOVWF  0A
004B:  SWAPF  21,W
004C:  MOVWF  03
004D:  SWAPF  7F,F
004E:  SWAPF  7F,W
004F:  RETFIE
0050:  BCF    0A.3
0051:  BCF    0A.4
0052:  GOTO   05E
0053:  BCF    0A.3
0054:  BCF    0A.4
0055:  GOTO   0A7
.................... #include <16F877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0056:  BCF    0A.0
0057:  BCF    0A.1
0058:  BCF    0A.2
0059:  ADDWF  02,F
005A:  RETLW  28
005B:  RETLW  0C
005C:  RETLW  01
005D:  RETLW  06
*
00B4:  DATA 0C,21
00B5:  DATA 34,1D
00B6:  DATA 25,36
00B7:  DATA 75,16
00B8:  DATA 20,21
00B9:  DATA 35,1D
00BA:  DATA 25,36
00BB:  DATA 75,16
00BC:  DATA 0A,21
00BD:  DATA 36,1D
00BE:  DATA 25,36
00BF:  DATA 75,16
00C0:  DATA 20,21
00C1:  DATA 37,1D
00C2:  DATA 25,36
00C3:  DATA 75,00
*
018E:  MOVF   0B,W
018F:  MOVWF  36
0190:  BCF    0B.7
0191:  BSF    03.5
0192:  BSF    03.6
0193:  BSF    0C.7
0194:  BSF    0C.0
0195:  NOP
0196:  NOP
0197:  BCF    03.5
0198:  BCF    03.6
0199:  BTFSC  36.7
019A:  BSF    0B.7
019B:  BTFSC  03.0
019C:  GOTO   1C5
019D:  BSF    03.6
019E:  MOVF   0C,W
019F:  ANDLW  7F
01A0:  BCF    03.6
01A1:  MOVWF  36
01A2:  BSF    03.6
01A3:  MOVF   0D,W
01A4:  BCF    03.6
01A5:  MOVWF  37
01A6:  BSF    03.6
01A7:  MOVF   0F,W
01A8:  BCF    03.6
01A9:  MOVWF  38
01AA:  MOVF   36,W
01AB:  MOVWF  3E
01AC:  CALL   15A
01AD:  MOVF   37,W
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  BCF    03.6
01B1:  MOVF   38,W
01B2:  BSF    03.6
01B3:  MOVWF  0F
01B4:  BCF    03.6
01B5:  MOVF   0B,W
01B6:  MOVWF  39
01B7:  BCF    0B.7
01B8:  BSF    03.5
01B9:  BSF    03.6
01BA:  BSF    0C.7
01BB:  BSF    0C.0
01BC:  NOP
01BD:  NOP
01BE:  BCF    03.5
01BF:  BCF    03.6
01C0:  BTFSC  39.7
01C1:  BSF    0B.7
01C2:  DECFSZ 35,F
01C3:  GOTO   1C5
01C4:  GOTO   1E4
01C5:  BSF    03.6
01C6:  RLF    0C,W
01C7:  RLF    0E,W
01C8:  ANDLW  7F
01C9:  BCF    03.6
01CA:  MOVWF  36
01CB:  BSF    03.6
01CC:  MOVF   0D,W
01CD:  BCF    03.6
01CE:  MOVWF  37
01CF:  BSF    03.6
01D0:  MOVF   0F,W
01D1:  BCF    03.6
01D2:  MOVWF  38
01D3:  MOVF   36,W
01D4:  MOVWF  3E
01D5:  CALL   15A
01D6:  MOVF   37,W
01D7:  BSF    03.6
01D8:  MOVWF  0D
01D9:  BCF    03.6
01DA:  MOVF   38,W
01DB:  BSF    03.6
01DC:  MOVWF  0F
01DD:  INCF   0D,F
01DE:  BTFSC  03.2
01DF:  INCF   0F,F
01E0:  BCF    03.0
01E1:  BCF    03.6
01E2:  DECFSZ 35,F
01E3:  GOTO   18E
01E4:  RETURN
01E5:  CLRF   3D
01E6:  MOVF   04,W
01E7:  MOVWF  3C
01E8:  BCF    3D.0
01E9:  BTFSC  03.7
01EA:  BSF    3D.0
01EB:  SWAPF  36,W
01EC:  IORLW  F0
01ED:  MOVWF  38
01EE:  ADDWF  38,F
01EF:  ADDLW  E2
01F0:  MOVWF  39
01F1:  ADDLW  32
01F2:  MOVWF  3B
01F3:  MOVF   36,W
01F4:  ANDLW  0F
01F5:  ADDWF  39,F
01F6:  ADDWF  39,F
01F7:  ADDWF  3B,F
01F8:  ADDLW  E9
01F9:  MOVWF  3A
01FA:  ADDWF  3A,F
01FB:  ADDWF  3A,F
01FC:  SWAPF  35,W
01FD:  ANDLW  0F
01FE:  ADDWF  3A,F
01FF:  ADDWF  3B,F
0200:  RLF    3A,F
0201:  RLF    3B,F
0202:  COMF   3B,F
0203:  RLF    3B,F
0204:  MOVF   35,W
0205:  ANDLW  0F
0206:  ADDWF  3B,F
0207:  RLF    38,F
0208:  MOVLW  07
0209:  MOVWF  37
020A:  MOVLW  0A
020B:  ADDWF  3B,F
020C:  DECF   3A,F
020D:  BTFSS  03.0
020E:  GOTO   20B
020F:  ADDWF  3A,F
0210:  DECF   39,F
0211:  BTFSS  03.0
0212:  GOTO   20F
0213:  ADDWF  39,F
0214:  DECF   38,F
0215:  BTFSS  03.0
0216:  GOTO   213
0217:  ADDWF  38,F
0218:  DECF   37,F
0219:  BTFSS  03.0
021A:  GOTO   217
021B:  MOVLW  37
021C:  MOVWF  04
021D:  BCF    03.7
021E:  MOVLW  07
021F:  ANDWF  3C,W
0220:  BCF    3C.6
0221:  ADDWF  04,F
0222:  MOVLW  3B
0223:  SUBWF  04,W
0224:  BTFSC  03.2
0225:  BSF    3C.6
0226:  MOVF   00,W
0227:  MOVWF  77
0228:  BTFSS  03.2
0229:  GOTO   232
022A:  BTFSC  3C.6
022B:  GOTO   232
022C:  BTFSC  3C.4
022D:  GOTO   244
022E:  BTFSC  3C.3
022F:  GOTO   232
0230:  MOVLW  20
0231:  GOTO   235
0232:  BSF    3C.3
0233:  BCF    3C.4
0234:  MOVLW  30
0235:  ADDWF  77,F
0236:  CLRF   36
0237:  MOVF   04,W
0238:  MOVWF  35
0239:  BCF    36.0
023A:  BTFSC  03.7
023B:  BSF    36.0
023C:  MOVF   77,W
023D:  MOVWF  3E
023E:  CALL   15A
023F:  MOVF   35,W
0240:  MOVWF  04
0241:  BCF    03.7
0242:  BTFSC  36.0
0243:  BSF    03.7
0244:  INCF   04,F
0245:  BTFSS  3C.6
0246:  GOTO   222
0247:  RETURN
.................... 
.................... #list
.................... 
.................... #device ADC = 10
.................... #use delay(crystal = 20000000)
*
00C4:  MOVLW  3F
00C5:  MOVWF  04
00C6:  BCF    03.7
00C7:  MOVF   00,W
00C8:  BTFSC  03.2
00C9:  GOTO   0D7
00CA:  MOVLW  06
00CB:  MOVWF  78
00CC:  CLRF   77
00CD:  DECFSZ 77,F
00CE:  GOTO   0CD
00CF:  DECFSZ 78,F
00D0:  GOTO   0CC
00D1:  MOVLW  7B
00D2:  MOVWF  77
00D3:  DECFSZ 77,F
00D4:  GOTO   0D3
00D5:  DECFSZ 00,F
00D6:  GOTO   0CA
00D7:  RETURN
.................... #FUSES NOWDT, NOBROWNOUT, NOLVP, HS
.................... 
.................... #include <lcd_d.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                     The following have special meaning:               ////
.................... ////                      \f  Clear display                                ////
.................... ////                      \n  Go to start of second line                   ////
.................... ////                      \b  Move back one position                       ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... // define the pinout.
.................... #define LCD_DATA_PORT      0x08     //portd    LA PUSE YO 
.................... 
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    BOOLEAN enable;           // on to an I/O port to gain
....................    BOOLEAN rs;               // access to the LCD pins.
....................    BOOLEAN rw;               // The bits are allocated from
....................    BOOLEAN unused;           // low order up.  ENABLE will
....................    int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
.................... 
.................... BYTE lcd_read_nibble(void);
.................... 
.................... BYTE lcd_read_byte(void)
.................... {
....................    BYTE low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
00EE:  MOVLW  0F
00EF:  BSF    03.5
00F0:  ANDWF  08,W
00F1:  IORLW  F0
00F2:  MOVWF  08
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00F3:  BCF    03.5
00F4:  BSF    08.2
....................    delay_cycles(1);
00F5:  NOP
....................    lcd_output_enable(1);
00F6:  BSF    08.0
....................    delay_cycles(1);
00F7:  NOP
....................    high = lcd_read_nibble();
00F8:  CALL   0E7
00F9:  MOVF   78,W
00FA:  MOVWF  46
....................       
....................    lcd_output_enable(0);
00FB:  BCF    08.0
....................    delay_cycles(1);
00FC:  NOP
....................    lcd_output_enable(1);
00FD:  BSF    08.0
....................    delay_us(1);
00FE:  GOTO   0FF
00FF:  GOTO   100
0100:  NOP
....................    low = lcd_read_nibble();
0101:  CALL   0E7
0102:  MOVF   78,W
0103:  MOVWF  45
....................       
....................    lcd_output_enable(0);
0104:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0105:  MOVLW  0F
0106:  BSF    03.5
0107:  ANDWF  08,W
0108:  MOVWF  08
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0109:  BCF    03.5
010A:  SWAPF  46,W
010B:  MOVWF  77
010C:  MOVLW  F0
010D:  ANDWF  77,F
010E:  MOVF   77,W
010F:  IORWF  45,W
0110:  MOVWF  78
.................... }
.................... 
.................... BYTE lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    BYTE n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
00E7:  MOVF   08,W
00E8:  MOVWF  77
00E9:  SWAPF  08,W
00EA:  ANDLW  0F
00EB:  MOVWF  78
....................   #endif
00EC:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(BYTE n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
00D8:  SWAPF  46,W
00D9:  ANDLW  F0
00DA:  MOVWF  77
00DB:  MOVLW  0F
00DC:  ANDWF  08,W
00DD:  IORWF  77,W
00DE:  MOVWF  08
....................   #endif
....................       
....................    delay_cycles(1);
00DF:  NOP
....................    lcd_output_enable(1);
00E0:  BSF    08.0
....................    delay_us(2);
00E1:  MOVLW  03
00E2:  MOVWF  77
00E3:  DECFSZ 77,F
00E4:  GOTO   0E3
....................    lcd_output_enable(0);
00E5:  BCF    08.0
00E6:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(BYTE address, BYTE n)
.................... {
....................    lcd_output_rs(0);
*
00ED:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0111:  MOVF   78,W
0112:  MOVWF  45
0113:  BTFSC  45.7
0114:  GOTO   0EE
....................    lcd_output_rs(address);
0115:  BTFSS  43.0
0116:  BCF    08.1
0117:  BTFSC  43.0
0118:  BSF    08.1
....................    delay_cycles(1);
0119:  NOP
....................    lcd_output_rw(0);
011A:  BCF    08.2
....................    delay_cycles(1);
011B:  NOP
....................    lcd_output_enable(0);
011C:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
011D:  SWAPF  44,W
011E:  MOVWF  45
011F:  MOVLW  0F
0120:  ANDWF  45,F
0121:  MOVF   45,W
0122:  MOVWF  46
0123:  CALL   0D8
....................    lcd_send_nibble(n & 0xf);
0124:  MOVF   44,W
0125:  ANDLW  0F
0126:  MOVWF  45
0127:  MOVWF  46
0128:  CALL   0D8
0129:  RETURN
.................... }
.................... 
.................... void lcd_init(void) 
.................... {
....................    BYTE i;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
012A:  MOVLW  0F
012B:  BSF    03.5
012C:  ANDWF  08,W
012D:  MOVWF  08
....................   #endif
....................    lcd_enable_tris();
012E:  BCF    08.0
....................    lcd_rs_tris();
012F:  BCF    08.1
....................    lcd_rw_tris();
0130:  BCF    08.2
....................  #endif
.................... 
....................    lcd_output_rs(0);
0131:  BCF    03.5
0132:  BCF    08.1
....................    lcd_output_rw(0);
0133:  BCF    08.2
....................    lcd_output_enable(0);
0134:  BCF    08.0
....................     
....................    delay_ms(15);
0135:  MOVLW  0F
0136:  MOVWF  3F
0137:  CALL   0C4
....................    for(i=1;i<=3;++i)
0138:  MOVLW  01
0139:  MOVWF  35
013A:  MOVF   35,W
013B:  SUBLW  03
013C:  BTFSS  03.0
013D:  GOTO   146
....................    {
....................        lcd_send_nibble(3);
013E:  MOVLW  03
013F:  MOVWF  46
0140:  CALL   0D8
....................        delay_ms(5);
0141:  MOVLW  05
0142:  MOVWF  3F
0143:  CALL   0C4
0144:  INCF   35,F
0145:  GOTO   13A
....................    }
....................     
....................    lcd_send_nibble(2);
0146:  MOVLW  02
0147:  MOVWF  46
0148:  CALL   0D8
....................    for(i=0;i<=3;++i)
0149:  CLRF   35
014A:  MOVF   35,W
014B:  SUBLW  03
014C:  BTFSS  03.0
014D:  GOTO   157
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
014E:  MOVF   35,W
014F:  CALL   056
0150:  MOVWF  36
0151:  CLRF   43
0152:  MOVF   36,W
0153:  MOVWF  44
0154:  CALL   0ED
0155:  INCF   35,F
0156:  GOTO   14A
0157:  BCF    0A.3
0158:  BCF    0A.4
0159:  GOTO   264 (RETURN)
.................... }
.................... 
.................... void lcd_gotoxy(BYTE x, BYTE y)
.................... {
....................    BYTE address;
.................... 
....................    if(y!=1)
*
0171:  DECFSZ 40,W
0172:  GOTO   174
0173:  GOTO   177
....................       address=LCD_LINE_TWO;
0174:  MOVLW  40
0175:  MOVWF  41
0176:  GOTO   178
....................    else
....................       address=0;
0177:  CLRF   41
....................      
....................    address+=x-1;
0178:  MOVLW  01
0179:  SUBWF  3F,W
017A:  ADDWF  41,F
....................    lcd_send_byte(0,0x80|address);
017B:  MOVF   41,W
017C:  IORLW  80
017D:  MOVWF  42
017E:  CLRF   43
017F:  MOVF   42,W
0180:  MOVWF  44
0181:  CALL   0ED
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
*
015A:  MOVF   3E,W
015B:  XORLW  0C
015C:  BTFSC  03.2
015D:  GOTO   165
015E:  XORLW  06
015F:  BTFSC  03.2
0160:  GOTO   16D
0161:  XORLW  02
0162:  BTFSC  03.2
0163:  GOTO   183
0164:  GOTO   188
....................    {
....................       case '\f'   :  lcd_send_byte(0,1);
0165:  CLRF   43
0166:  MOVLW  01
0167:  MOVWF  44
0168:  CALL   0ED
....................                      delay_ms(2);
0169:  MOVLW  02
016A:  MOVWF  3F
016B:  CALL   0C4
....................                      break;
016C:  GOTO   18D
....................                      
....................       case '\n'   : lcd_gotoxy(1,2);        break;
016D:  MOVLW  01
016E:  MOVWF  3F
016F:  MOVLW  02
0170:  MOVWF  40
*
0182:  GOTO   18D
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0183:  CLRF   43
0184:  MOVLW  10
0185:  MOVWF  44
0186:  CALL   0ED
0187:  GOTO   18D
....................      
....................       default     : lcd_send_byte(1,c);     break;
0188:  MOVLW  01
0189:  MOVWF  43
018A:  MOVF   3E,W
018B:  MOVWF  44
018C:  CALL   0ED
....................    }
018D:  RETURN
.................... }
....................  
.................... char lcd_getc(BYTE x, BYTE y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... 
.................... #use STANDARD_IO(B)
.................... #use STANDARD_IO(C)
.................... #use STANDARD_IO(D)
.................... 
.................... int16 contador1=0;
.................... int16 contador2=0;
.................... int16 contador3=0;
.................... int16 contador4=0;
.................... int1 huboCambio = 0;
.................... 
.................... int1 b4_previo = 0;
.................... int1 b5_previo = 0;
.................... int1 b6_previo = 0;
.................... int1 b7_previo = 0;
.................... 
.................... #INT_RB
.................... void rb_isr()
.................... {
....................    if(input(PIN_B4)==1 && b4_previo == 0)contador1+=1;
*
005E:  BSF    03.5
005F:  BSF    06.4
0060:  BCF    03.5
0061:  BTFSS  06.4
0062:  GOTO   069
0063:  BTFSC  34.1
0064:  GOTO   069
0065:  MOVLW  01
0066:  ADDWF  2C,F
0067:  BTFSC  03.0
0068:  INCF   2D,F
....................    if(input(PIN_B5)==1 && b5_previo == 0)contador2+=1;
0069:  BSF    03.5
006A:  BSF    06.5
006B:  BCF    03.5
006C:  BTFSS  06.5
006D:  GOTO   074
006E:  BTFSC  34.2
006F:  GOTO   074
0070:  MOVLW  01
0071:  ADDWF  2E,F
0072:  BTFSC  03.0
0073:  INCF   2F,F
....................    if(input(PIN_B6)==1 && b6_previo == 0)contador3+=1;
0074:  BSF    03.5
0075:  BSF    06.6
0076:  BCF    03.5
0077:  BTFSS  06.6
0078:  GOTO   07F
0079:  BTFSC  34.3
007A:  GOTO   07F
007B:  MOVLW  01
007C:  ADDWF  30,F
007D:  BTFSC  03.0
007E:  INCF   31,F
....................    if(input(PIN_B7)==1 && b7_previo == 0)contador4+=1;
007F:  BSF    03.5
0080:  BSF    06.7
0081:  BCF    03.5
0082:  BTFSS  06.7
0083:  GOTO   08A
0084:  BTFSC  34.4
0085:  GOTO   08A
0086:  MOVLW  01
0087:  ADDWF  32,F
0088:  BTFSC  03.0
0089:  INCF   33,F
....................    
....................    b4_previo = input(PIN_B4);
008A:  BSF    03.5
008B:  BSF    06.4
008C:  BCF    03.5
008D:  BCF    34.1
008E:  BTFSC  06.4
008F:  BSF    34.1
....................    b5_previo = input(PIN_B5);
0090:  BSF    03.5
0091:  BSF    06.5
0092:  BCF    03.5
0093:  BCF    34.2
0094:  BTFSC  06.5
0095:  BSF    34.2
....................    b6_previo = input(PIN_B6);
0096:  BSF    03.5
0097:  BSF    06.6
0098:  BCF    03.5
0099:  BCF    34.3
009A:  BTFSC  06.6
009B:  BSF    34.3
....................    b7_previo = input(PIN_B7);
009C:  BSF    03.5
009D:  BSF    06.7
009E:  BCF    03.5
009F:  BCF    34.4
00A0:  BTFSC  06.7
00A1:  BSF    34.4
....................    huboCambio = 1;
00A2:  BSF    34.0
.................... }
.................... 
00A3:  BCF    0B.0
00A4:  BCF    0A.3
00A5:  BCF    0A.4
00A6:  GOTO   02F
.................... #INT_EXT
.................... void ext_isr()
.................... {
....................    contador1 = 0;
00A7:  CLRF   2D
00A8:  CLRF   2C
....................    contador2 = 0;
00A9:  CLRF   2F
00AA:  CLRF   2E
....................    contador3 = 0;
00AB:  CLRF   31
00AC:  CLRF   30
....................    contador4 = 0;
00AD:  CLRF   33
00AE:  CLRF   32
....................    huboCambio = 1;
00AF:  BSF    34.0
00B0:  BCF    0B.1
00B1:  BCF    0A.3
00B2:  BCF    0A.4
00B3:  GOTO   02F
.................... }
.................... 
.................... void main()
*
0248:  MOVF   03,W
0249:  ANDLW  1F
024A:  MOVWF  03
024B:  MOVLW  FF
024C:  MOVWF  2B
024D:  CLRF   2D
024E:  CLRF   2C
024F:  CLRF   2F
0250:  CLRF   2E
0251:  CLRF   31
0252:  CLRF   30
0253:  CLRF   33
0254:  CLRF   32
0255:  BCF    34.0
0256:  BCF    34.1
0257:  BCF    34.2
0258:  BCF    34.3
0259:  BCF    34.4
025A:  BSF    03.5
025B:  BSF    1F.0
025C:  BSF    1F.1
025D:  BSF    1F.2
025E:  BCF    1F.3
025F:  MOVLW  07
0260:  MOVWF  1C
0261:  BCF    03.7
.................... {
....................    // Inicializar pines
....................    lcd_init();
0262:  BCF    03.5
0263:  GOTO   12A
.................... 
....................    enable_interrupts(GLOBAL);
0264:  MOVLW  C0
0265:  IORWF  0B,F
....................    enable_interrupts(INT_RB);
0266:  BSF    0B.3
....................    enable_interrupts(INT_EXT);
0267:  BSF    0B.4
....................    while (TRUE)
....................    {
....................       if(huboCambio)
0268:  BTFSS  34.0
0269:  GOTO   2AF
....................       {
....................          printf(lcd_putc,"\fB4:%lu, B5:%lu,\nB6:%lu, B7:%lu",contador1,contador2,contador3,contador4);
026A:  MOVLW  B4
026B:  BSF    03.6
026C:  MOVWF  0D
026D:  MOVLW  00
026E:  MOVWF  0F
026F:  BCF    03.0
0270:  MOVLW  04
0271:  BCF    03.6
0272:  MOVWF  35
0273:  CALL   18E
0274:  MOVLW  10
0275:  MOVWF  04
0276:  MOVF   2D,W
0277:  MOVWF  36
0278:  MOVF   2C,W
0279:  MOVWF  35
027A:  CALL   1E5
027B:  MOVLW  B7
027C:  BSF    03.6
027D:  MOVWF  0D
027E:  MOVLW  00
027F:  MOVWF  0F
0280:  BSF    03.0
0281:  MOVLW  05
0282:  BCF    03.6
0283:  MOVWF  35
0284:  CALL   18E
0285:  MOVLW  10
0286:  MOVWF  04
0287:  MOVF   2F,W
0288:  MOVWF  36
0289:  MOVF   2E,W
028A:  MOVWF  35
028B:  CALL   1E5
028C:  MOVLW  BB
028D:  BSF    03.6
028E:  MOVWF  0D
028F:  MOVLW  00
0290:  MOVWF  0F
0291:  BSF    03.0
0292:  MOVLW  05
0293:  BCF    03.6
0294:  MOVWF  35
0295:  CALL   18E
0296:  MOVLW  10
0297:  MOVWF  04
0298:  MOVF   31,W
0299:  MOVWF  36
029A:  MOVF   30,W
029B:  MOVWF  35
029C:  CALL   1E5
029D:  MOVLW  BF
029E:  BSF    03.6
029F:  MOVWF  0D
02A0:  MOVLW  00
02A1:  MOVWF  0F
02A2:  BSF    03.0
02A3:  MOVLW  05
02A4:  BCF    03.6
02A5:  MOVWF  35
02A6:  CALL   18E
02A7:  MOVLW  10
02A8:  MOVWF  04
02A9:  MOVF   33,W
02AA:  MOVWF  36
02AB:  MOVF   32,W
02AC:  MOVWF  35
02AD:  CALL   1E5
....................          huboCambio=0;
02AE:  BCF    34.0
....................       }
02AF:  GOTO   268
....................    }
.................... }
02B0:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
